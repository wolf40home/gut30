/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	 Copyright (C) 2003 Citect Pty Limited
//
// 	FILE:	CSV_WinUtl.ci
//
//	DESCRIPTION:
//
//		Contains Windows utility functions.
//
//	PUBLIC FUNCTIONS:
//
//				CSV_WinUtl_GetSystemDir()
//				CSV_WinUtl_GetWindowsDir()
//				CSV_WinUtl_LockWindowUpdate()
//				CSV_WinUtl_NormalCursor()
//				CSV_WinUtl_WaitCursor()
//				CSV_WinUtl_LoadCursor()
//				CSV_WinUtl_DestroyCursor()
//				CSV_WinUtl_GetColourRes()
//				CSV_WinUtl_ShellExec()
//				CSV_WinUtl_GetWinMode()
//				CSV_WinUtl_GetCpuUsage()
//
//
// 	NOTES:
//		
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//			
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//	MODULE VARIABLES

INT		mhGetWindowsDir = -1;
INT		mhGetSystemDir = -1;
INT		mhLockWindowUpdate = -1;
INT		mhNormalCursor = -1;
INT		mhWaitCursor = -1;
INT		mhGetCursor = -1;
INT		mhSetCursor = -1;
INT		mhLoadCursor = -1;
INT		mhDestroyCursor = -1;
INT		mhDefaultCursor = -1;
INT		mhGetDC = -1;
INT		mhGetDeviceCaps = -1;
INT		mhShellExecute = -1;
INT		mhGetCpuUsage = -1;

INT		mbWinUtilInit = 0;
INT		mbWinUtlInitCpuDLL = 0;

INT		miColourRes = -1;
INT		miWinMode = -1;
INT		miTotalCpuUsage;
INt		miCpuUsageCalcTime;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_GetSystemDir()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	11/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Get the windows system directory.
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
//
//			Windows system directory path
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

STRING
FUNCTION
CSV_WinUtl_GetSystemDir()
	
	STRING	sSystemDir;

	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
		
	sSystemDir = DLLCall(mhGetSystemDir, "");
	
	IF sSystemDir <> "" THEN
	
		IF StrRight(sSystemDir, 1) <> "\" THEN
	
			sSystemDir = sSystemDir + "\";
		END
	END
	
	ErrSet(0);
	
	RETURN sSystemDir;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_GetWindowsDir()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	11/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Get the windows directory.
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
//
//			Windows directory path
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

STRING
FUNCTION
CSV_WinUtl_GetWindowsDir()
	
	STRING	sWindowsDir;

	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
		
	sWindowsDir = DLLCall(mhGetWindowsDir, "");

	IF sWindowsDir <> "" THEN
	
		IF StrRight(sWindowsDir, 1) <> "\" THEN
	
			sWindowsDir = sWindowsDir + "\";
		END
	END
		
	ErrSet(0);
		
	RETURN sWindowsDir;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_LockWindowUpdate()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	14/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Freezes the specified window (prevents Citect repainting it).
//
// 		ARGUMENTS:
//
//			hWnd		-	handle of window to freeze, or -1 to unfreeze any frozen window.
//
//     	RETURNED VALUE: 
//
//			0 if successful, otherwise -1.
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_LockWindowUpdate(INT hWnd)
	
	INT	iResult;
	
	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END

	IF hWnd <> -1 THEN
	
		iResult = DLLCall(mhLockWindowUpdate, IntToStr(hWnd));
	ELSE
		iResult = DLLCall(mhLockWindowUpdate, "");
	END
	
	ErrSet(0);
	
	RETURN iResult;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_NormalCursor()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	14/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Load the normal cursor for a specified window.
//
// 		ARGUMENTS:
//
//			hWnd			-	handle of window to change cursor for
//
//     	RETURNED VALUE: 
//
//			Handle to normal cursor.
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_NormalCursor(INT hWnd)
	
	INT		hCursor;
	
	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
	
	hCursor = DLLCall(mhNormalCursor, IntToStr(hWnd));
	
	ErrSet(0);
	
	RETURN hCursor;
	
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_WaitCursor()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	14/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Load the wait/busy cursor for a specified window.
//
// 		ARGUMENTS:
//
//			hWnd			-	handle of window to change cursor for
//
//     	RETURNED VALUE: 
//
//			Handle to wait cursor.
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_WaitCursor(INT hWnd)
	
	INT		hCursor;
	
	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
	
	hCursor = DLLCall(mhWaitCursor, IntToStr(hWnd));
	
	ErrSet(0);
	
	RETURN hCursor;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_LoadCursor()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	14/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Load the cursor for a specified window from a file ( .ani or .cur).
//
// 		ARGUMENTS:
//
//			sCursor			-	file (including path) containing cursor
//			hWnd			-	handle of window to change cursor for
//
//     	RETURNED VALUE: 
//
//			Handle to new cursor.
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_LoadCursor(STRING sCursor, INT hWnd)
	
	INT		hCursor;
	
	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
	
	sCursor = PathToStr(sCursor);
	
	hCursor = DLLCall(mhLoadCursor, "^"" + sCursor + "^"," + IntToStr(hWnd));
	
	ErrSet(0);
	
	RETURN hCursor;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_DestroyCursor()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	14/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Delete the specified cursor and set the cursor to the normal cursor.
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
//
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_DestroyCursor(INT hCursor = -1)
	
	INT	hWnd;

	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
		
	hWnd = WinGetWndHnd();
	
	IF hCursor <> -1 THEN
	
		DLLCall(mhDestroyCursor, IntToStr(hCursor));
		
		CSV_WinUtl_NormalCursor(hWnd);
	END
	
	ErrSet(0);
	
	RETURN 0;
	
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_GetColourRes()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	09/07/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Gets the screen colour resolution.
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
//
//			Screen colour resolution:
//				0	- 256 colours
//				1	- High colour (16 bit)
//				2	- True colour (24 bit/32 bit)
//
//			   -1	- Error
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_GetColourRes()
	
	INT		hWnd;
	INT		hDC;
	INT		iColourRes;

	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
		
	IF miColourRes = -1 THEN
	
		iColourRes = ParameterGet("Page", "ColourRes", -1);
		
		IF iColourRes = -1 THEN
		
			hWnd = WinGetWndHnd();
			
			hDC = DLLCall(mhGetDC, IntToStr(hWnd));
			
			IF hDC <> 0 THEN
			
				iColourRes = DLLCall(mhGetDeviceCaps, IntToStr(hDC) + ",12");
				
				SELECT CASE iColourRes
				
				CASE 8
					iColourRes = 0;
					
				CASE 16
					iColourRes = 1;
					
				CASE 24, 32
					iColourRes = 2;
				
				CASE ELSE
					iColourRes = 3;
					
				END SELECT
				
			END
		END
		
		miColourRes = iColourRes;	
	END
	
	ErrSet(0);
	
	RETURN miColourRes;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_ShellExec()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	16/07/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//
//			Opens or prints a specified file. 
//
// 		ARGUMENTS:
//
//			sOperation 	-	specifies the operation to perform. 		
//							The following operation strings are valid: 
//								"open"  	The function opens the file specified by the lpFile parameter. 
//											The file can be an executable file or a document file. It can also be a folder. 
//								"print" 	The function prints the file specified by lpFile. The file should be a document file. 
//											If the file is an executable file, the function opens the file, 
//											as if "open" had been specified. 
//								"explore"  	The function explores the folder specified by lpFile.  
//			
//							This parameter can be "". In that case, the function opens the file specified by lpFile. 
//			
//			sFile 		-	specifies the file to open or print or the folder to open or explore. 
//							The function can open an executable file or a document file. The function can print a document file. 
//			sArgs		-	If sFile specifies an executable file, sArgs specifies the parameters to be passed to the application. 
//							If sFile specifies a document file, sArgs should be "". 
//			sDir		-	specifies the default directory. 
//			
//			iShowCmd 	-	If sFile specifies an executable file, iShowCmd specifies how the application is to be shown 
//							when it is opened. This parameter can be one of the following values: 
//							
//							SW_HIDE  			(=0)	Hides the window and activates another window. 
//							SW_MAXIMIZE  		(=3)	Maximizes the specified window. 
//							SW_MINIMIZE  		(=6)	Minimizes the specified window and activates the next top-level window 
//															in the z-order. 
//							SW_RESTORE  		(=9)	Activates and displays the window. If the window is minimized or maximized, 
//															Windows restores it to its original size and position. An application should 
//															specify this flag when restoring a minimized window. 
//							SW_SHOW  			(=5)	Activates the window and displays it in its current size and position.  
//							SW_SHOWDEFAULT  	(=10)	Sets the show state based on the SW_ flag specified in the 
//															STARTUPINFO structure passed to theCreateProcess function by the program that 
//															started the application. An application should call ShowWindow with this flag
//															to set the initial show state of its main window. 
//							SW_SHOWMAXIMIZED  	(=3)	Activates the window and displays it as a maximized window. 
//							SW_SHOWMINIMIZED  	(=2)	Activates the window and displays it as a minimized window. 
//							SW_SHOWMINNOACTIVE  (=7)	Displays the window as a minimized window. The active window remains active. 
//							SW_SHOWNA  			(=8)	Displays the window in its current state. The active window remains active. 
//							SW_SHOWNOACTIVATE  	(=4)	Displays a window in its most recent size and position. 
//															The active window remains active. 
//							SW_SHOWNORMAL  		(=1)	Activates and displays a window. If the window is minimized or maximized, 
//															Windows restores it to its original size and position. An application should 
//															specify this flag when displaying the window for the first time. 
//			
//							If sFile specifies a document file, nShowCmd should be zero. 
//					
//
//     	RETURNED VALUE: 
//
//				Returns a value greater than 32 if successful, 
//				or an error value that is less than or equal to 32 otherwise. 
//				The following table lists the error values. 
//				
//					ERROR_FILE_NOT_FOUND  	(=2)	The specified file was not found. 
//					ERROR_PATH_NOT_FOUND  	(=3)	The specified path was not found. 
//					ERROR_BAD_FORMAT  		(=17)	The .exe file is invalid (non-Win32® .exe or error in .exe image). 
//					SE_ERR_ACCESSDENIED  	(=5)	The operating system denied access to the specified file.  
//					SE_ERR_ASSOCINCOMPLETE  (=27)	The file name association is incomplete or invalid. 
//					SE_ERR_DDEBUSY  		(=30)	The DDE transaction could not be completed because other DDE transactions were being processed. 
//					SE_ERR_DDEFAIL  		(=29)	The DDE transaction failed. 
//					SE_ERR_DDETIMEOUT  		(=28)	The DDE transaction could not be completed because the request timed out. 
//					SE_ERR_DLLNOTFOUND  	(=32)	The specified dynamic-link library was not found.  
//					SE_ERR_FNF  			(=2)	The specified file was not found.  
//					SE_ERR_NOASSOC  		(=31)	There is no application associated with the given file name extension. 
//					SE_ERR_OOM  			(=8)	There was not enough memory to complete the operation. 
//					SE_ERR_PNF  			(=3)	The specified path was not found. 
//					SE_ERR_SHARE  			(=26)	A sharing violation occurred. 
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_ShellExec(STRING sFile, STRING sArgs = "", STRING sDir = "", STRING sOperation = "", INT iShowCmd = 1)
	
	INT	hWnd;
	INT	iResult;

	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END
		
	hWnd = WinGetWndHnd();
	
	iResult = DLLCall(mhShellExecute, IntToStr(hWnd) + ",^"" + sOperation + "^",^"" + sFile + "^",^"" 
			+ sArgs  + "^",^"" + sDir + "^"," + IntToStr(iShowCmd));
	
	ErrSet(0);
	
	RETURN iResult;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_GetWinMode()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	16/07/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Returns 1 if Citect is in Fullscreen mode.
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
//
//			1 if fullscreen mode([Animator]Fullscreen = 1), otherwise 0.
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_GetWinMode()

	IF miWinMode = -1 THEN
	
		miWinMode = ParameterGet("Animator","Fullscreen", 0);
	END
	
	
	RETURN NOT (NOT (miWinMode));
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_GetCpuUsage()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	24/07/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Get the percent CPU usage of a specified process, or the total CPU usage.
//
// 		ARGUMENTS:
//
//			sProcessName	- Name of process, or "" to get total CPU usage.
//
//     	RETURNED VALUE: 
//
//			Percentage CPU usage. 
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_GetCpuUsage(STRING sProcessName = "")
	
	INT		iCpuUsage;

	ErrSet(1);
	
	IF NOT mbWinUtilInit THEN
	
		_CSV_WinUtl_Init();
	END

	IF NOT mbWinUtlInitCpuDLL THEN
	 	DLLCall(mhGetCpuUsage, ""); !Initialise CPU Usage DLL
	 	mbWinUtlInitCpuDLL = 1;
	END
		
	iCpuUsage = DLLCall(mhGetCpuUsage, sProcessName);
	
	IF sProcessName = "" THEN
	
		miTotalCpuUsage = iCpuUsage;
	END
		
	ErrSet(0);
	
	RETURN iCpuUsage;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_UpdateTotalCpuUsage()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	24/07/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Update the total percent CPU usage at minimum of 0.5sec intervals. 
//			Called from Admin Tools page. 
//
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
// 
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_UpdateTotalCpuUsage()

	ErrSet(1);
	
	WHILE TRUE DO
		IF SysTime() - miCpuUsageCalcTime > 500 THEN 
			
			CSV_WinUtl_GetCpuUsage();
			miCpuUsageCalcTime = SysTime();
		END
		
		SleepMs(500);
	END
			
	ErrSet(0);
	
	RETURN 0;
	
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_WinUtl_GetTotalCpuUsage()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	24/07/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Get the total percent CPU usage.  
//
//			Note:  Call CSV_WinUtl_UpdateTotalCpuUsage to refresh the data
//				(CSV_WinUtl_UpdateTotalCpuUsage prevents 'Foreground Cicode run too long' error);  
//
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
// 
//			Total CPU Usage.
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
CSV_WinUtl_GetTotalCpuUsage()
	
	RETURN miTotalCpuUsage;
	
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						_CSV_WinUtl_Init()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	14/03/03	J.Venz		Original
//
//     	GENERAL DESCRIPTION
//			
//			Initialise WinUtil Dll calls.
//
// 		ARGUMENTS:
//
//
//     	RETURNED VALUE: 
//
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT
FUNCTION
_CSV_WinUtl_Init()
	
	STRING	sDLLPath;
	
	ErrSet(1);
	
	sDLLPath = PathToStr("[BIN]:WinUtil.DLL");

	mhLockWindowUpdate = DLLOpen("User32.dll", "LockWindowUpdate", "AJ");
	mhGetWindowsDir = DLLOpen(sDLLPath, "WinUtil_GetWindowsDir", "C");
	mhGetSystemDir = DLLOpen(sDLLPath, "WinUtil_GetSystemDir", "C");
	mhNormalCursor = DLLOpen(sDLLPath, "WinUtil_NormalCursor", "JJ");
	mhWaitCursor = DLLOpen(sDLLPath, "WinUtil_WaitCursor", "JJ");
	mhLoadCursor = DLLOpen(sDLLPath, "WinUtil_LoadCursor", "JCJ");
	mhDestroyCursor = DLLOpen(sDLLPath, "WinUtil_DestroyCursor", "JJ");	
	mhGetCpuUsage = DLLOpen(sDLLPath, "WinUtil_GetCpuUsage", "HC");	
	mhGetDC = DLLOpen("User32.dll", "GetDC", "JJ");
	mhGetDeviceCaps = DLLOpen("Gdi32.dll", "GetDeviceCaps", "JJJ");
	mhShellExecute = DLLOpen("shell32.dll", "ShellExecuteA", "JJCCCCJ");
 
	mbWinUtilInit = 1;
	
	ErrSet(0);
	
	RETURN 0;
		
END


