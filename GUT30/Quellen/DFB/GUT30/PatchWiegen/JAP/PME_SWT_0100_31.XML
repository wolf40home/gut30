<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<FBDExchangeFile>
	<FBSource nameOfFBType="PME_SWT_0100_31" version="0.77" dateTime="dt#2017-08-10-14:33:10">
		<comment>Baustein: PME_SWT_0100</comment>
		<attribute name="TypeCodeCheckSumString" value="A112"></attribute>
		<attribute name="TypeSignatureCheckSumString" value="94E6"></attribute>
		<inputParameters>
			<variables name="CIP_ADR" typeName="STRING">
				<attribute name="PositionPin" value="2"></attribute>
			</variables>
			<variables name="E_SIM" typeName="REAL">
				<attribute name="PositionPin" value="4"></attribute>
			</variables>
			<variables name="SQ" typeName="BOOL">
				<comment>Sammelquittierung</comment>
				<attribute name="PositionPin" value="16"></attribute>
			</variables>
		</inputParameters>
		<inOutParameters>
			<variables name="E_IO" typeName="T_PME_SWT_105">
				<attribute name="PositionPin" value="1"></attribute>
			</variables>
			<variables name="LW" typeName="WORD">
				<attribute name="PositionPin" value="9"></attribute>
			</variables>
			<variables name="CONF" typeName="T_WEIGHING_PMESWT_ST_30">
				<attribute name="PositionPin" value="14"></attribute>
			</variables>
			<variables name="WERT" typeName="PME_SWT_IN_OUT">
				<attribute name="PositionPin" value="11"></attribute>
			</variables>
		</inOutParameters>
		<outputParameters>
			<variables name="ERROR" typeName="BOOL">
				<attribute name="PositionPin" value="16"></attribute>
			</variables>
			<variables name="Calibration_Step" typeName="UINT">
				<attribute name="PositionPin" value="15"></attribute>
			</variables>
			<variables name="OUT" typeName="PME_SWT_OUT">
				<attribute name="PositionPin" value="12"></attribute>
			</variables>
			<variables name="M" typeName="DWORD">
				<attribute name="PositionPin" value="10"></attribute>
			</variables>
			<variables name="AE_WEIGHT" typeName="AE_IN">
				<attribute name="PositionPin" value="4"></attribute>
			</variables>
			<variables name="AE_FR" typeName="AE_IN">
				<attribute name="PositionPin" value="6"></attribute>
			</variables>
			<variables name="WEIGHT" typeName="REAL">
				<attribute name="PositionPin" value="5"></attribute>
			</variables>
			<variables name="FR" typeName="REAL">
				<attribute name="PositionPin" value="7"></attribute>
			</variables>
		</outputParameters>
		<publicLocalVariables>
			<variables name="EXCH_ADR" typeName="string[40]"></variables>
			<variables name="DataExch_Tx_Rx_Buffer" typeName="ARRAY[0..290] OF INT"></variables>
		</publicLocalVariables>
		<privateLocalVariables>
			<variables name="Management_Param" typeName="ARRAY[0..3] OF INT"></variables>
			<variables name="Temp_Buffer_Data" typeName="ARRAY[0..570] OF BYTE"></variables>
			<variables name="LSPS" typeName="SR"></variables>
			<variables name="MSPS" typeName="SR"></variables>
			<variables name="ASPS" typeName="SR"></variables>
			<variables name="SIMES" typeName="SR"></variables>
			<variables name="R_TRIG_1" typeName="R_TRIG"></variables>
			<variables name="F_TRIG_1" typeName="F_TRIG"></variables>
			<variables name="LSP" typeName="BOOL"></variables>
			<variables name="MSP" typeName="BOOL"></variables>
			<variables name="ASP" typeName="BOOL"></variables>
			<variables name="SIM" typeName="BOOL"></variables>
			<variables name="CIP_X00" typeName="BOOL"></variables>
			<variables name="CIP_X01" typeName="BOOL"></variables>
			<variables name="CIP_X02" typeName="BOOL"></variables>
			<variables name="i" typeName="INT"></variables>
			<variables name="j" typeName="INT"></variables>
			<variables name="Invalid_ID" typeName="BOOL"></variables>
			<variables name="Upload_RuntimeCfg_Done" typeName="BOOL"></variables>
			<variables name="PIP_Previous_ID_TLV_Size" typeName="INT"></variables>
			<variables name="PIP_Current_Param_ID" typeName="INT"></variables>
			<variables name="PIP_Current_Param_Length" typeName="BYTE"></variables>
			<variables name="wordtmp1" typeName="WORD"></variables>
			<variables name="Functional_Command_In_Progress" typeName="BOOL"></variables>
			<variables name="Implicit_Response_Register" typeName="UINT"></variables>
			<variables name="Restore_Runtime_Conf_Done" typeName="BOOL"></variables>
			<variables name="Command_Register_Temp" typeName="UINT"></variables>
			<variables name="PIP_Current_Param_Type" typeName="BYTE"></variables>
			<variables name="wordtmp2" typeName="WORD"></variables>
			<variables name="CIP_Valid_Req" typeName="BOOL"></variables>
			<variables name="udinttmp1" typeName="UDINT"></variables>
			<variables name="Explicit_Write_Cde_Register_flag" typeName="BOOL"></variables>
			<variables name="bytetmp1" typeName="BYTE"></variables>
			<variables name="Save_CIP_Execute" typeName="BOOL"></variables>
			<variables name="dinttmp1" typeName="DINT"></variables>
			<variables name="arint2tmp" typeName="ARRAY[0..1] OF INT"></variables>
			<variables name="arint2tmp2" typeName="ARRAY[0..0] OF INT"></variables>
			<variables name="CIP_Service" typeName="BYTE"></variables>
			<variables name="CIP_Classe" typeName="BYTE"></variables>
			<variables name="CIP_Instance" typeName="BYTE"></variables>
			<variables name="CIP_Attribut" typeName="BYTE"></variables>
			<variables name="CIP_Attribut_INT" typeName="INT"></variables>
			<variables name="CIP_Valid_Class" typeName="BOOL"></variables>
			<variables name="CIP_ReqSizeWords" typeName="INT"></variables>
			<variables name="CIP_ReqDataSizeWords" typeName="INT"></variables>
			<variables name="CIP_Valid_Attribute" typeName="BOOL"></variables>
			<variables name="PIP_RequestType" typeName="BOOL"></variables>
			<variables name="PIP_NbParams" typeName="INT"></variables>
			<variables name="CIP_ReqSizeBytes" typeName="INT"></variables>
			<variables name="Load1tmp" typeName="UDINT"></variables>
			<variables name="SENSENtmp" typeName="REAL"></variables>
			<variables name="EXP" typeName="REAL"></variables>
			<variables name="TOF_1" typeName="TOF"></variables>
			<variables name="TOF_2" typeName="TOF"></variables>
			<variables name="TOF_3" typeName="TOF"></variables>
			<variables name="TOF_4" typeName="TOF"></variables>
			<variables name="TOF_5" typeName="TOF"></variables>
			<variables name="TOF_6" typeName="TOF"></variables>
			<variables name="TOF_7" typeName="TOF"></variables>
			<variables name="Load2tmp" typeName="UDINT"></variables>
			<variables name="Load3tmp" typeName="UDINT"></variables>
			<variables name="TOF_8" typeName="TOF"></variables>
			<variables name="TOF_9" typeName="TOF"></variables>
			<variables name="tempstr1" typeName="string[30]"></variables>
			<variables name="quitt" typeName="BOOL"></variables>
			<variables name="SR_1" typeName="SR"></variables>
			<variables name="DTM1tmp" typeName="BOOL"></variables>
			<variables name="DTM2tmp" typeName="BOOL"></variables>
			<variables name="R_TRIG_2" typeName="R_TRIG"></variables>
			<variables name="Commands" typeName="ARRAY[0..70] OF INT">
				<instanceElementDesc name="[0]">
					<value>1001</value>
				</instanceElementDesc>
				<instanceElementDesc name="[1]">
					<value>1002</value>
				</instanceElementDesc>
				<instanceElementDesc name="[2]">
					<value>1003</value>
				</instanceElementDesc>
				<instanceElementDesc name="[3]">
					<value>1004</value>
				</instanceElementDesc>
				<instanceElementDesc name="[4]">
					<value>1005</value>
				</instanceElementDesc>
				<instanceElementDesc name="[5]">
					<value>1006</value>
				</instanceElementDesc>
				<instanceElementDesc name="[6]">
					<value>1007</value>
				</instanceElementDesc>
				<instanceElementDesc name="[7]">
					<value>1008</value>
				</instanceElementDesc>
				<instanceElementDesc name="[8]">
					<value>1009</value>
				</instanceElementDesc>
				<instanceElementDesc name="[9]">
					<value>1010</value>
				</instanceElementDesc>
				<instanceElementDesc name="[10]">
					<value>1011</value>
				</instanceElementDesc>
				<instanceElementDesc name="[11]">
					<value>1012</value>
				</instanceElementDesc>
				<instanceElementDesc name="[12]">
					<value>1013</value>
				</instanceElementDesc>
				<instanceElementDesc name="[13]">
					<value>1014</value>
				</instanceElementDesc>
				<instanceElementDesc name="[14]">
					<value>1015</value>
				</instanceElementDesc>
				<instanceElementDesc name="[15]">
					<value>1016</value>
				</instanceElementDesc>
				<instanceElementDesc name="[16]">
					<value>1017</value>
				</instanceElementDesc>
				<instanceElementDesc name="[17]">
					<value>1018</value>
				</instanceElementDesc>
				<instanceElementDesc name="[18]">
					<value>1019</value>
				</instanceElementDesc>
				<instanceElementDesc name="[19]">
					<value>1020</value>
				</instanceElementDesc>
				<instanceElementDesc name="[20]">
					<value>1021</value>
				</instanceElementDesc>
				<instanceElementDesc name="[21]">
					<value>1022</value>
				</instanceElementDesc>
				<instanceElementDesc name="[22]">
					<value>1023</value>
				</instanceElementDesc>
				<instanceElementDesc name="[23]">
					<value>1027</value>
				</instanceElementDesc>
				<instanceElementDesc name="[24]">
					<value>1028</value>
				</instanceElementDesc>
				<instanceElementDesc name="[25]">
					<value>1029</value>
				</instanceElementDesc>
				<instanceElementDesc name="[26]">
					<value>1030</value>
				</instanceElementDesc>
				<instanceElementDesc name="[27]">
					<value>1031</value>
				</instanceElementDesc>
				<instanceElementDesc name="[28]">
					<value>1032</value>
				</instanceElementDesc>
				<instanceElementDesc name="[29]">
					<value>1033</value>
				</instanceElementDesc>
				<instanceElementDesc name="[30]">
					<value>1034</value>
				</instanceElementDesc>
				<instanceElementDesc name="[31]">
					<value>1035</value>
				</instanceElementDesc>
				<instanceElementDesc name="[32]">
					<value>1036</value>
				</instanceElementDesc>
				<instanceElementDesc name="[33]">
					<value>1037</value>
				</instanceElementDesc>
				<instanceElementDesc name="[34]">
					<value>1038</value>
				</instanceElementDesc>
				<instanceElementDesc name="[35]">
					<value>1039</value>
				</instanceElementDesc>
				<instanceElementDesc name="[36]">
					<value>1040</value>
				</instanceElementDesc>
				<instanceElementDesc name="[37]">
					<value>1041</value>
				</instanceElementDesc>
				<instanceElementDesc name="[38]">
					<value>1042</value>
				</instanceElementDesc>
				<instanceElementDesc name="[39]">
					<value>1043</value>
				</instanceElementDesc>
				<instanceElementDesc name="[40]">
					<value>1044</value>
				</instanceElementDesc>
				<instanceElementDesc name="[41]">
					<value>1045</value>
				</instanceElementDesc>
				<instanceElementDesc name="[42]">
					<value>1046</value>
				</instanceElementDesc>
				<instanceElementDesc name="[43]">
					<value>1047</value>
				</instanceElementDesc>
				<instanceElementDesc name="[44]">
					<value>1024</value>
				</instanceElementDesc>
				<instanceElementDesc name="[45]">
					<value>1056</value>
				</instanceElementDesc>
				<instanceElementDesc name="[46]">
					<value>1058</value>
				</instanceElementDesc>
				<instanceElementDesc name="[47]">
					<value>1060</value>
				</instanceElementDesc>
				<instanceElementDesc name="[48]">
					<value>1061</value>
				</instanceElementDesc>
				<instanceElementDesc name="[49]">
					<value>1000</value>
				</instanceElementDesc>
				<instanceElementDesc name="[50]">
					<value>1025</value>
				</instanceElementDesc>
				<instanceElementDesc name="[51]">
					<value>1026</value>
				</instanceElementDesc>
				<instanceElementDesc name="[52]">
					<value>1048</value>
				</instanceElementDesc>
				<instanceElementDesc name="[53]">
					<value>1049</value>
				</instanceElementDesc>
				<instanceElementDesc name="[54]">
					<value>1050</value>
				</instanceElementDesc>
				<instanceElementDesc name="[55]">
					<value>1051</value>
				</instanceElementDesc>
				<instanceElementDesc name="[56]">
					<value>1052</value>
				</instanceElementDesc>
				<instanceElementDesc name="[57]">
					<value>1054</value>
				</instanceElementDesc>
				<instanceElementDesc name="[58]">
					<value>1057</value>
				</instanceElementDesc>
			</variables>
		</privateLocalVariables>
		<FBProgram name="Leitwort">
			<FBDSource nbRows="24" nbColumns="36">
				<networkFBD>
					<FFBBlock instanceName=".1" typeName="WORD_TO_BIT" additionnalPinNumber="0" enEnO="false" width="9" height="20">
						<objPosition posX="9" posY="8"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="LW"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT0"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT1"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT2"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT3"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT4"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT5"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT6"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT7"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT8"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT9"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT10"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT11"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT12"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT13"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT14"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="BIT15"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="LSPS" typeName="SR" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="93" posY="5"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="S1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="R"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q1" effectiveParameter="LSP"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="MSPS" typeName="SR" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="93" posY="17"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="S1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="R"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q1" effectiveParameter="MSP"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="ASPS" typeName="SR" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="93" posY="30"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="S1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="R"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q1" effectiveParameter="ASP"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".2" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="15" posY="65"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="0"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="LW"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".4" typeName="OR_BOOL" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="30" posY="30"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="sq"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="quitt"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".3" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="79" posY="3"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.0"></inputVariable>
							<inputVariable invertedPin="true" formalParameter="IN2" effectiveParameter="LSPS.Q1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".6" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="79" posY="9"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.0"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="LSPS.Q1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".5" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="79" posY="15"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.1"></inputVariable>
							<inputVariable invertedPin="true" formalParameter="IN2" effectiveParameter="MSP"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".7" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="79" posY="21"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="MSP"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".8" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="79" posY="27"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.2"></inputVariable>
							<inputVariable invertedPin="true" formalParameter="IN2" effectiveParameter="ASPS.Q1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".9" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="79" posY="33"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.2"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="ASPS.Q1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="SIMES" typeName="SR" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="66" posY="50"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="S1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="R"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q1"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="R_TRIG_1" typeName="R_TRIG" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="48" posY="44"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="CLK" effectiveParameter="%SW62.8"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="F_TRIG_1" typeName="F_TRIG" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="48" posY="58"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="CLK" effectiveParameter="%SW62.8"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".10" typeName="OR_BOOL" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="56" posY="46"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".11" typeName="OR_BOOL" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="56" posY="53"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".12" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="36" posY="47"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.4"></inputVariable>
							<inputVariable invertedPin="true" formalParameter="IN2" effectiveParameter="SIMES.Q1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".13" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="36" posY="53"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="LW.4"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="SIMES.Q1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".14" typeName="AND_BOOL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="76" posY="50"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1"></inputVariable>
							<inputVariable invertedPin="true" formalParameter="IN2" effectiveParameter="%SW62.9"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="SIM"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".15" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="28" posY="15"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Cancel_Tare"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".16" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="28" posY="0"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Tare"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".18" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="30" posY="36"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Zero"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".17" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="28" posY="5"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Zero_adjustment"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".20" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="28" posY="10"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Start_Physical_Calibration"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".19" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="28" posY="21"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Start_Theoretical_scaling"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<linkFB>
						<linkSource parentObjectName=".12" pinName="OUT">
							<objPosition posX="43" posY="51"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".10" pinName="IN2">
							<objPosition posX="56" posY="51"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".10" pinName="OUT">
							<objPosition posX="62" posY="50"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="SIMES" pinName="S1">
							<objPosition posX="66" posY="54"></objPosition>
						</linkDestination>
						<gridObjPosition posX="65" posY="50"></gridObjPosition>
						<gridObjPosition posX="65" posY="54"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName="R_TRIG_1" pinName="Q">
							<objPosition posX="54" posY="48"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".10" pinName="IN1">
							<objPosition posX="56" posY="50"></objPosition>
						</linkDestination>
						<gridObjPosition posX="55" posY="50"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".11" pinName="OUT">
							<objPosition posX="62" posY="57"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="SIMES" pinName="R">
							<objPosition posX="66" posY="55"></objPosition>
						</linkDestination>
						<gridObjPosition posX="65" posY="57"></gridObjPosition>
						<gridObjPosition posX="65" posY="55"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="BIT8">
							<objPosition posX="17" posY="20"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".15" pinName="EN">
							<objPosition posX="28" posY="18"></objPosition>
						</linkDestination>
						<gridObjPosition posX="26" posY="20"></gridObjPosition>
						<gridObjPosition posX="26" posY="18"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName="SIMES" pinName="Q1">
							<objPosition posX="72" posY="54"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".14" pinName="IN1">
							<objPosition posX="76" posY="54"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".7" pinName="OUT">
							<objPosition posX="86" posY="25"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="MSPS" pinName="R">
							<objPosition posX="93" posY="22"></objPosition>
						</linkDestination>
						<gridObjPosition posX="90" posY="25"></gridObjPosition>
						<gridObjPosition posX="90" posY="22"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".8" pinName="OUT">
							<objPosition posX="86" posY="31"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="ASPS" pinName="S1">
							<objPosition posX="93" posY="34"></objPosition>
						</linkDestination>
						<gridObjPosition posX="90" posY="31"></gridObjPosition>
						<gridObjPosition posX="90" posY="34"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="BIT14">
							<objPosition posX="17" posY="26"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".4" pinName="IN1">
							<objPosition posX="30" posY="34"></objPosition>
						</linkDestination>
						<gridObjPosition posX="25" posY="26"></gridObjPosition>
						<gridObjPosition posX="25" posY="34"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="BIT6">
							<objPosition posX="17" posY="18"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".17" pinName="EN">
							<objPosition posX="28" posY="8"></objPosition>
						</linkDestination>
						<gridObjPosition posX="24" posY="18"></gridObjPosition>
						<gridObjPosition posX="24" posY="8"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="BIT15">
							<objPosition posX="17" posY="27"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".18" pinName="EN">
							<objPosition posX="30" posY="39"></objPosition>
						</linkDestination>
						<gridObjPosition posX="24" posY="27"></gridObjPosition>
						<gridObjPosition posX="24" posY="39"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="BIT5">
							<objPosition posX="17" posY="17"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".16" pinName="EN">
							<objPosition posX="28" posY="3"></objPosition>
						</linkDestination>
						<gridObjPosition posX="23" posY="17"></gridObjPosition>
						<gridObjPosition posX="23" posY="3"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".5" pinName="OUT">
							<objPosition posX="86" posY="19"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="MSPS" pinName="S1">
							<objPosition posX="93" posY="21"></objPosition>
						</linkDestination>
						<gridObjPosition posX="90" posY="19"></gridObjPosition>
						<gridObjPosition posX="90" posY="21"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="BIT7">
							<objPosition posX="17" posY="19"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".20" pinName="EN">
							<objPosition posX="28" posY="13"></objPosition>
						</linkDestination>
						<gridObjPosition posX="25" posY="19"></gridObjPosition>
						<gridObjPosition posX="25" posY="13"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".3" pinName="OUT">
							<objPosition posX="86" posY="7"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="LSPS" pinName="S1">
							<objPosition posX="93" posY="9"></objPosition>
						</linkDestination>
						<gridObjPosition posX="90" posY="7"></gridObjPosition>
						<gridObjPosition posX="90" posY="9"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".6" pinName="OUT">
							<objPosition posX="86" posY="13"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="LSPS" pinName="R">
							<objPosition posX="93" posY="10"></objPosition>
						</linkDestination>
						<gridObjPosition posX="90" posY="13"></gridObjPosition>
						<gridObjPosition posX="90" posY="10"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".9" pinName="OUT">
							<objPosition posX="86" posY="37"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="ASPS" pinName="R">
							<objPosition posX="93" posY="35"></objPosition>
						</linkDestination>
						<gridObjPosition posX="90" posY="37"></gridObjPosition>
						<gridObjPosition posX="90" posY="35"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="BIT9">
							<objPosition posX="17" posY="21"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".19" pinName="EN">
							<objPosition posX="28" posY="24"></objPosition>
						</linkDestination>
						<gridObjPosition posX="23" posY="21"></gridObjPosition>
						<gridObjPosition posX="23" posY="24"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName="F_TRIG_1" pinName="Q">
							<objPosition posX="54" posY="62"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".11" pinName="IN2">
							<objPosition posX="56" posY="58"></objPosition>
						</linkDestination>
						<gridObjPosition posX="55" posY="58"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".13" pinName="OUT">
							<objPosition posX="43" posY="57"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".11" pinName="IN1">
							<objPosition posX="56" posY="57"></objPosition>
						</linkDestination>
					</linkFB>
					<textBox width="11" height="13">0 Leitsperre ein/aus
1 Meldesperre ein/aus
2 Alarmsperre ein/aus
    <objPosition posX="8" posY="35"></objPosition>
					</textBox>
				</networkFBD>
			</FBDSource>
		</FBProgram>
		<FBProgram name="Init">
			<STSource>(****************************************************************************************)
(* DFB		 : SCAIME Mx80 Weighing Module PMESWT 0100                              *)
(*											*)
(* Brief 	 : This function allows to perform runtime configuration of weighing    *)
(*                 module using explicit request on parameters ID (PIP protocol)        *)
(*											*)
(* Author        : Youssouf Coulibaly 							*)
(* Version       : 4.47								        *)
(* Date		 : 11 December 2014							*)
(*											*)
(* Copyright 2014, SCAIME, all rights reserved						*)
(****************************************************************************************)

(* Initialization step *)
if (CONF.Initialization and not CONF.Application_Status.Dfb_Initialization_Done) then

	CIP_X00 := true;
	CIP_X01 := false;
	CIP_X02 := false;
	PIP_Previous_ID_TLV_Size := 0;
	PIP_Current_Param_ID := 0;
	PIP_Current_Param_Length := 0;
	i:=0;
	j:=0;

	Upload_RuntimeCfg_Done := false;
	Invalid_ID := false;
	CONF.Application_Configuration.Ignored_DTM_Configuration := True;
	CONF.Application_Configuration.Calibration.Ignored_DTM_Calibration := True;
	CONF.Application_Commands.Configuration_Parameters_IDs := Commands;
end_if;

CONF.Application_Status.Dfb_Initialization_Done := CONF.Initialization;

(* Device in RUN state information *)
CONF.Application_Status.Module_RUN_State := E_IO.Inputs.DEVICE_HEALTH;
</STSource>
		</FBProgram>
		<FBProgram name="Vorbereiten">
			<FBDSource nbRows="24" nbColumns="36">
				<networkFBD></networkFBD>
			</FBDSource>
		</FBProgram>
		<FBProgram name="IO_SANNING">
			<STSource>(* Process IO Scanning if device in RUN state *)
if (CONF.Application_Status.Module_RUN_State and CONF.Application_Status.Dfb_Initialization_Done) then 

	Implicit_Response_Register := E_IO.Inputs.RespRegister;
	
	CONF.Application_Status.Gross_Measurement:= DIV_REAL( E_IO.Inputs.GrossMeasurement,EXP);
	CONF.Application_Status.Net_Measurement:= E_IO.Inputs.NetMeasurement;
	OUT.Tare:=DIV_REAL( E_IO.Inputs.TareValue,EXP);
	CONF.Application_Status.Flow_Rate_Value:= E_IO.Inputs.FlowRate;
	CONF.Application_Status.Factory_Measurement:= E_IO.Inputs.FactMeasurement;

	CONF.Application_Status.Legal_ForTrade_Counter:= E_IO.Inputs.LegalForTradeCount;
	CONF.Application_Status.Legal_ForTrade_Checksum:= E_IO.Inputs.LegalForTradeCRC;

	wordtmp1:= UINT_TO_WORD(E_IO.Inputs.Measurement_Status);	

	CONF.Application_Status.Measurement_ok := (wordtmp1.2 = 0 and wordtmp1.3 = 0);

	CONF.Application_Status.Stability_flag := wordtmp1.4;
	
	CONF.Application_Status.Preset_Tare_Process_flag := wordtmp1.7;
	CONF.Application_Status.Flash_Memory_Status := wordtmp1.6;		

	CONF.Application_Status.Input_I0_State := wordtmp1.8;
	CONF.Application_Status.Input_I1_State := wordtmp1.9;

	CONF.Application_Status.Output_S0_State := wordtmp1.10;
	CONF.Application_Status.Output_S1_State := wordtmp1.11;
	CONF.Application_Status.Output_S2_State := wordtmp1.12;
	CONF.Application_Status.Output_S3_State := wordtmp1.13;

	CONF.Application_Status.Tare_Process_flag := wordtmp1.14;
	CONF.Application_Status.ZeroTare_Process_flag := wordtmp1.15;

	wordtmp1:= UINT_TO_WORD(E_IO.Inputs.DeviceStatus);
		
	CONF.Application_Status.Dosing_Cycle_Status := wordtmp1.0;

	CONF.Application_Status.Calibration_Done_Status := wordtmp1.1;

	OUT.App_Firmware_Version := E_IO.Inputs.Reserved_2;

	wordtmp1.0 := wordtmp1.10;
	wordtmp1.1 := wordtmp1.11;
	wordtmp1.2 := wordtmp1.12;
	wordtmp1.3 := wordtmp1.13;
	wordtmp1.4 := wordtmp1.14;
	wordtmp1.5 := wordtmp1.15;
	
	OUT.Calibration_Sequence_Code := WORD_TO_BYTE(wordtmp1 and 16#3F);

	case BYTE_TO_INT(OUT.Calibration_Sequence_Code) of 

		0 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting for Calibration Command';


		1 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Theoretical Zero Calibration Done';

		2 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Theoretical Full Span Calibration Done';

		3 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Zero Adjustment Done';

		4 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Span Adjustment Done';

		5 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting For Zero Reference Acquisition';(*'Starting Physical Calibration';*)

		6 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting For Reference Load 1 Acquisition';(*'Zero Acquisition Done';*)

		7 : 
			if (CONF.Application_Configuration.Calibration.Number_Of_Segments &gt; 1) then

				CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting For Reference Load 2 Acquisition';(*'Ref. Load 1 Acquisition Done';*)
			else

				CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting For Save Command';(*'Ref. Load 3 Acquisition Done'*);	
			end_if;			
		8 : 
			if (CONF.Application_Configuration.Calibration.Number_Of_Segments &gt; 2) then

				CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting For Reference Load 3 Acquisition';(*'Ref. Load 2 Acquisition Done';*)
			else

				CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting For Save Command';(*'Ref. Load 3 Acquisition Done'*);	
			end_if;	

		9 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Waiting For Save Command';(*'Ref. Load 3 Acquisition Done'*);

		10 : 
			CONF.Application_Status.Calibration_Sequence_dfb_Message := 'Save Calibration Done';

	end_case;  

	(* IO Scanning Response Register *)
	if (Implicit_Response_Register = 16#01) then
		
		Functional_Command_In_Progress := true;
	else
		Functional_Command_In_Progress := false;
	end_if;

	CONF.Application_Status.Implicit_Response_Register := Implicit_Response_Register;
	

	(* IO Scanning Command Register in Output (sending to device) *)
	if (CONF.Application_Commands.Device_Reset) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00D0;

			CONF.Application_Commands.Device_Reset := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Tare) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00D4;

			CONF.Application_Commands.Tare := false;

		end_if;
		
	end_if;

	if (CONF.Application_Commands.Cancel_Tare) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00D5;

			CONF.Application_Commands.Cancel_Tare := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Preset_Tare) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00E5;

			CONF.Application_Commands.Preset_Tare := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Zero) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00D3;

			CONF.Application_Commands.Zero := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Tare_In_Specified_Time) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00E7;

			CONF.Application_Commands.Tare_In_Specified_Time := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Zero_In_Specified_Time) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00E6;

			CONF.Application_Commands.Zero_In_Specified_Time := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Start_Theoretical_scaling) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00D7;

			CONF.Application_Commands.Start_Theoretical_scaling := false;

		end_if;
	end_if;
	if (CONF.Application_Commands.Clearing_functional_registers) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#0000;

			CONF.Application_Commands.Clearing_functional_registers := false;

		end_if;
	end_if;	


	if (CONF.Application_Commands.Start_Dosing_Cycle) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00E8;

			CONF.Application_Commands.Start_Dosing_Cycle := false;

		end_if;
	end_if;


	if (CONF.Application_Commands.Stop_Dosing_Cycle) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00E9;

			CONF.Application_Commands.Stop_Dosing_Cycle := false;

		end_if;
	end_if;

	
	if (CONF.Application_Commands.Saving_Calibration_in_flash) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00DE;

			CONF.Application_Commands.Saving_Calibration_in_flash := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Saving_in_flash_memory) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00D1;

			CONF.Application_Commands.Saving_in_flash_memory := false;

		end_if;
	end_if;

	if (CONF.Application_Commands.Restore_Factory_Settings) then

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := 16#00D2;

			Restore_Runtime_Conf_Done := true;

			CONF.Application_Commands.Restore_Factory_Settings := false;

			CIP_X00 := true;
			CIP_X01 := false;
			CIP_X02 := false;

			PIP_Previous_ID_TLV_Size := 0;
			PIP_Current_Param_ID := 0;
			PIP_Current_Param_Length := 0;
			i:=0;
			j:=0;

			Upload_RuntimeCfg_Done := false;

		end_if;
	end_if;

	(* Weighing Module Physical Calibration Mode Management *)
	if (CONF.Application_Commands.Start_Physical_Calibration) then

		case Calibration_Step of 

			0 : (* Cancel previous one if needed *)
				Command_Register_Temp := 16#00D6;

				Calibration_Step := 1;

			1 : (* start new sequence *)
				Command_Register_Temp := 16#00D9;

				Calibration_Step := 2;

			2 : (* Wait response *)
				case Implicit_Response_Register of

					2 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 3;	

						CONF.Application_Status.Calibration_Error_Status := false;
					3 :
						Command_Register_Temp := 16#00D6;

						Calibration_Step := 0;

						CONF.Application_Commands.Start_Physical_Calibration := false;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;

			3 : (* Wait zero acquisition validation *)
				if (CONF.Application_Commands.Calibration_Steps_Validation and not Functional_Command_In_Progress) then

					CONF.Application_Commands.Calibration_Steps_Validation := false;

					Command_Register_Temp := 16#00DA;

					Calibration_Step := 4;				
				end_if;

			4 : (* Wait response *)
				case Implicit_Response_Register of

					0, 1 :
						;
					2 :
						Calibration_Step := 5;

						Command_Register_Temp := 16#0000;

						CONF.Application_Status.Calibration_Error_Status := false;
					3 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 3;

						CONF.Application_Status.Calibration_Error_Status := true;
					else
						Command_Register_Temp := 16#00D6;

						Calibration_Step := 0;

						CONF.Application_Commands.Start_Physical_Calibration := false;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;

			5 : (* Wait Load 1 acquisition validation *)
				if (CONF.Application_Commands.Calibration_Steps_Validation and not Functional_Command_In_Progress) then

					CONF.Application_Commands.Calibration_Steps_Validation := false;

					Command_Register_Temp := 16#00DB;
				
					Calibration_Step := 6;										
				end_if;

			6 : (* Wait response *)
				case Implicit_Response_Register of

					0, 1 :
						;
					2 :
						Command_Register_Temp := 16#0000;

						CONF.Application_Status.Calibration_Error_Status := false;

						if (CONF.Application_Configuration.Calibration.Number_Of_Segments &gt; 1) then

							Calibration_Step := 7;
						else
							Calibration_Step := 11;

							(*Module_Configuration_ST.Application_Commands.Calibration_Mode := false;*)
						end_if;
					3 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 5;

						CONF.Application_Status.Calibration_Error_Status := true;
					else
						Command_Register_Temp := 16#00D6;

						Calibration_Step := 0;

						CONF.Application_Commands.Start_Physical_Calibration := false;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;

			7 : (* Wait Load 2 acquisition validation *)
				if (CONF.Application_Commands.Calibration_Steps_Validation and not Functional_Command_In_Progress) then

					CONF.Application_Commands.Calibration_Steps_Validation := false;

					Command_Register_Temp := 16#00DC;

					Calibration_Step := 8;			
				end_if;

			8 : (* Wait response *)
				case Implicit_Response_Register of

					0, 1 :
						;
					2 :
						Command_Register_Temp := 16#0000;

						CONF.Application_Status.Calibration_Error_Status := false;

						if (CONF.Application_Configuration.Calibration.Number_Of_Segments &gt; 2) then

							Calibration_Step := 9;
						else
							Calibration_Step := 11;

							(*Module_Configuration_ST.Application_Commands.Calibration_Mode := false;*)
						end_if;	
					3 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 7;

						CONF.Application_Status.Calibration_Error_Status := true;
					else
						Command_Register_Temp := 16#00D6;

						Calibration_Step := 0;

						CONF.Application_Commands.Start_Physical_Calibration := false;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;


			9 : (* Wait Load 3 acquisition validation *)
				if (CONF.Application_Commands.Calibration_Steps_Validation and not Functional_Command_In_Progress) then

					CONF.Application_Commands.Calibration_Steps_Validation := false;

					Command_Register_Temp := 16#00DD;

					Calibration_Step := 10;														
				end_if;

			10 : (* Wait response *)
				case Implicit_Response_Register of

					0, 1 :
						;
					2 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 11;

						(*Module_Configuration_ST.Application_Commands.Calibration_Mode := false;*)

						CONF.Application_Status.Calibration_Error_Status := false;
					3 :
						Calibration_Step := 9;

						Command_Register_Temp := 16#0000;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;

			11 : (* Save calibration command *)
				if (not Functional_Command_In_Progress) then

					Command_Register_Temp := 16#00DE;

					Calibration_Step := 12;
				end_if;

			12 : (* Wait response *)
				case Implicit_Response_Register of

					0, 1 :
						;
					2 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 0;

						CONF.Application_Commands.Start_Physical_Calibration := false;

						CONF.Application_Status.Calibration_Error_Status := false;
					3 :
						Calibration_Step := 11;

						Command_Register_Temp := 16#0000;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;
		end_case;

		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := Command_Register_Temp;
		end_if;	

		if (CONF.Application_Commands.Cancel_Current_Command) then

			if (not Functional_Command_In_Progress) then

				E_IO.Outputs.CdeRegister := 16#00D6;

				CONF.Application_Commands.Cancel_Current_Command := false;

				Command_Register_Temp := 16#0000;

				Calibration_Step := 0;

				CONF.Application_Commands.Start_Physical_Calibration := false;

				CONF.Application_Status.Calibration_Error_Status := false;
			end_if;
		end_if;		
			
	end_if;

	(* Weighing Module Zero adjustment Management *)
	if (CONF.Application_Commands.Zero_adjustment) then

		case Calibration_Step of 

			0 : (* Cancel previous one if needed *)
				Command_Register_Temp := 16#00D6;

				Calibration_Step := 1;

			1 : (* start new sequence *)
				Command_Register_Temp := 16#00D8;

				Calibration_Step := 2;

			2 : (* Wait response *)
				case Implicit_Response_Register of

					2 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 11;	

						CONF.Application_Status.Calibration_Error_Status := false;
					3 :
						Command_Register_Temp := 16#00D6;

						Calibration_Step := 0;

						CONF.Application_Commands.Zero_adjustment := false;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;

			11 : (* Save calibration command *)
				if (not Functional_Command_In_Progress) then

					Command_Register_Temp := 16#00DE;

					Calibration_Step := 12;
				end_if;

			12 : (* Wait response *)
				case Implicit_Response_Register of

					0, 1 :
						;
					2 :
						Command_Register_Temp := 16#0000;

						Calibration_Step := 0;

						CONF.Application_Commands.Zero_adjustment := false;

						CONF.Application_Status.Calibration_Error_Status := false;
					3 :
						Calibration_Step := 11;

						Command_Register_Temp := 16#0000;

						CONF.Application_Status.Calibration_Error_Status := true;
				end_case;
		end_case;
		if (not Functional_Command_In_Progress) then

			E_IO.Outputs.CdeRegister := Command_Register_Temp;
		end_if;	

		if (CONF.Application_Commands.Cancel_Current_Command) then

			if (not Functional_Command_In_Progress) then

				E_IO.Outputs.CdeRegister := 16#00D6;

				CONF.Application_Commands.Cancel_Current_Command := false;

				Command_Register_Temp := 16#0000;

				Calibration_Step := 0;

				CONF.Application_Commands.Zero_adjustment := false;

				CONF.Application_Status.Calibration_Error_Status := false;
			end_if;
		end_if;		
			
	end_if;
else

	if (not CONF.Application_Status.Dfb_Initialization_Done or not CONF.Application_Status.Module_RUN_State) then
		
		CONF.Application_Configuration.SWTouch.HMI_Address := 0;
		CONF.Application_Configuration.SWTouch.HMI_Baudrate := 0;
		CONF.Application_Configuration.SWTouch.HMI_Panel_Settings := 0;
		CONF.Application_Configuration.SWTouch.HMI_PassWord := '';

		CONF.Application_Configuration.LegalFor_Trade.Legal_Mode_Sealing_Switchs := 0;
		CONF.Application_Configuration.LegalFor_Trade.LegalForTrade_SW_Version := 0;
		CONF.Application_Configuration.LegalFor_Trade.LegalForTrade_Counter := 0;
		CONF.Application_Configuration.LegalFor_Trade.LegalForTrade_Checksum := 0;
		CONF.Application_Configuration.LegalFor_Trade.Zero_functions := 0;
		CONF.Application_Configuration.LegalFor_Trade.Zero_Tare_Specified_Time_ms := 0;
		CONF.Application_Configuration.LegalFor_Trade.Preset_Tare_Value := 0;
		CONF.Application_Configuration.LegalFor_Trade.Stability_Criterion := 0;
		CONF.Application_Configuration.LegalFor_Trade.Decimal_Point_Position := 0;
		CONF.Application_Configuration.LegalFor_Trade.Unit := '';
		CONF.Application_Configuration.LegalFor_Trade.LoadCell_Terminal_Resistor := 0;

		WERT.Maximum_Capacity := 0;
		CONF.Application_Configuration.Calibration.Number_Of_Segments := 0;
		WERT.Calibration_Load_1 := 0;
		WERT.Calibration_Load_2 := 0;
		WERT.Calibration_Load_3 := 0;
		WERT.Sensor_Sensitivity := 0.0;
		CONF.Application_Configuration.Calibration.Sensor_Zero_Sensitivity := 0.0;
		CONF.Application_Configuration.Calibration.Scale_Interval := 0;
		CONF.Application_Configuration.Calibration.User_Calibration_Zero_Value := 0;
		CONF.Application_Configuration.Calibration.Coef_Span_adjustment_1 := 0.0;
		CONF.Application_Configuration.Calibration.Coef_Span_adjustment_2 := 0.0;
		CONF.Application_Configuration.Calibration.Coef_Span_adjustment_3 := 0.0;
		CONF.Application_Configuration.Calibration.Global_SpanAdjustment_Coef := 0.0;
		CONF.Application_Configuration.Calibration.Calibration_Place_g_Value := 0.0;
		CONF.Application_Configuration.Calibration.Place_Of_Use_g_Value := 0.0;

		CONF.Application_Configuration.Calibration.Calibration_Restoring_status := 0;
		
		CONF.Application_Configuration.Calibration.Ignored_DTM_Calibration := false;
		CONF.Application_Configuration.Ignored_DTM_Configuration := false;
		

		CONF.Application_Configuration.Filtering.AD_Converter_Settings := 0;
		CONF.Application_Configuration.Filtering.Low_Pass_Order := 0;
		CONF.Application_Configuration.Filtering.Low_Pass_CutOff_Frequency := 0.0;
		CONF.Application_Configuration.Filtering.Mean_Filter_Depth := 0;
		CONF.Application_Configuration.Filtering.Flow_Filter_Depth := 0;
		CONF.Application_Configuration.Filtering.Flow_Time_Unit := '';

		CONF.Application_Configuration.Logical_Inputs_Outputs.Input_I0_Settings := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Input_I1_Settings := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Inputs_Holding_Time_ms := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Outputs_S0S1_Settings := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Coarse_Feed_CutOff_Point := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Fine_Feed_CutOff_Point := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Fine_Feed_Mask_Time_ms := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Output_S2_Setting := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.S2_Set_Point_Low_Value := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.S2_Set_Point_High_Value := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.Output_S3_Setting := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.S3_Set_Point_Low_Value := 0;
		CONF.Application_Configuration.Logical_Inputs_Outputs.S3_Set_Point_High_Value := 0;
		
		CONF.Application_Status.Explicit_Cde_Register_RetCode := 0;	
		CONF.Application_Status.Implicit_Response_Register := 0;	
		CONF.Application_Status.Gross_Measurement := 0;	
		CONF.Application_Status.Net_Measurement := 0;	
		OUT.Tare := 0.0;	
		CONF.Application_Status.Flow_Rate_Value := 0.0;	
		CONF.Application_Status.Factory_Measurement := 0;	
		CONF.Application_Status.Stability_flag := 0;	
		CONF.Application_Status.Measurement_Ok := 0;	
		CONF.Application_Status.Tare_Process_flag := 0;
		CONF.Application_Status.ZeroTare_Process_flag := 0;
		CONF.Application_Status.Preset_Tare_Process_flag := 0;
		CONF.Application_Status.Flash_Memory_Status := 0;
			
		CONF.Application_Status.Input_I0_State := 0;	
		CONF.Application_Status.Input_I1_State := 0;	
		CONF.Application_Status.Output_S0_State := 0;	
		CONF.Application_Status.Output_S1_State := 0;	
		CONF.Application_Status.Output_S2_State := 0;	
		CONF.Application_Status.Output_S3_State := 0;	
		CONF.Application_Status.Dosing_Cycle_Status := 0;
		
		CONF.Application_Status.Calibration_Done_Status := 0;	
		OUT.Calibration_Sequence_Code := 0;	
		CONF.Application_Status.Calibration_Sequence_dfb_Message := '';	
		CONF.Application_Status.Calibration_Error_Status := 0;	
		OUT.App_Firmware_Version := 0;	
		CONF.Application_Status.Legal_ForTrade_Counter := 0;	
		CONF.Application_Status.Legal_ForTrade_Checksum := 0;			
			

		Upload_RuntimeCfg_Done := false;

		CIP_X00 := true;
		CIP_X01 := false;
		CIP_X02 := false;

		PIP_Previous_ID_TLV_Size := 0;
		PIP_Current_Param_ID := 0;
		PIP_Current_Param_Length := 0;
		i:=0;
		j:=0;
	else		
		if (CONF.Application_Status.Dfb_Initialization_Done   and Upload_RuntimeCfg_Done) then

			CIP_X00 := true;
			CIP_X01 := false;
			CIP_X02 := false;

			PIP_Previous_ID_TLV_Size := 0;
			PIP_Current_Param_ID := 0;
			PIP_Current_Param_Length := 0;
			i:=0;
			j:=0;

			Upload_RuntimeCfg_Done := false;
			Invalid_ID := false;
		
		end_if;	
	end_if;
end_if;
</STSource>
		</FBProgram>
		<FBProgram name="Explicit_request">
			<STSource>(* Explicit request management to read/write device PRM parameters *)
if (CIP_X00) then
	if ((CONF.Application_Commands.Execute_Explicit_Request and not Save_CIP_Execute and not Management_Param[0].0 and CONF.Application_Status.Module_RUN_State ) or (CONF.Application_Status.Dfb_Initialization_Done and 
		CONF.Application_Status.Module_RUN_State and not 
		Upload_RuntimeCfg_Done)) then

		(* Definition de l'objet CIP *)
		(* Toolkit PassThrough explicit Service = 16#35 *)
		CIP_Service  := 16#35;

		(* Toolkit PassThrough explicit Class = 16#64 *)
		CIP_Classe   := 16#64;

		(* Toolkit PassThrough explicit Instance = 16#01 *)
		CIP_Instance := 16#01;

		(* Toolkit PassThrough explicit Attribut = 16#01 *)
		CIP_Attribut_INT := 16#01;

		CIP_Attribut := INT_TO_BYTE(CIP_Attribut_INT);

		CIP_ReqSizeWords     := 0;
		CIP_ReqDataSizeWords := 0;
		CIP_Valid_Req        := false;
		Invalid_ID 	     := false;

		(* Vérification de la classe (Seulement une supportée par le Toolkit 0x64) *)
		CIP_Valid_Class      := (CIP_Classe = 16#64);

		(* Vérification de l'instance *)
		(* Elle est toujours à 1, on ne l'utilise pas *)

		(* Vérification de l'attribut *)
		if (CIP_Classe = 16#64) then
			CIP_Valid_Attribute := (CIP_Attribut_INT = 16#01);
		end_if;

		(* Elaboration de la requête *)
		if(CIP_Valid_Class) then

			if (CIP_Service = 16#35) then
			(* Set_PassThrough_Request *)
				if (CIP_Classe = 16#64) then

					if (CONF.Application_Commands.Execute_Explicit_Request) then 
						
						Save_CIP_Execute := true;
					end_if;

					if (not Upload_RuntimeCfg_Done) then

						(* Service READ utilisé dans la requête PIP *)
						PIP_RequestType := 0;

						(* Nombre de parametres dans la requête PIP (IDs 1000 up to 1061) *)
						PIP_NbParams    := 62;

						(* Entête de la requête PIP *)
						DataExch_Tx_Rx_Buffer[4] := WORD_TO_INT(BYTE_AS_WORD(BOOL_TO_BYTE(PIP_RequestType), INT_TO_BYTE(PIP_NbParams)));						

					else

						(* Nombre de parametres dans la requête PIP *)
						PIP_NbParams    := BYTE_TO_INT(CONF.Application_Commands.Number_Of_Parameters);

						(* Service utilisé dans la requête PIP *)
						PIP_RequestType := CONF.Application_Commands.Explicit_Request_Service;

						(* Entête de la requête PIP *)
						DataExch_Tx_Rx_Buffer[4] := WORD_TO_INT(BYTE_AS_WORD(BOOL_TO_BYTE(CONF.Application_Commands.Explicit_Request_Service), CONF.Application_Commands.Number_Of_Parameters));
					end_if;

					(* Requête de lecture des données *)
					if (not PIP_RequestType) then
						
						Invalid_ID := PIP_NbParams = 0;

						(* Recuperation des IDs à lire *) 
						for i:= 0 to (PIP_NbParams - 1) do

							if not Upload_RuntimeCfg_Done then
								
								(* All PRM Ids list *)
								DataExch_Tx_Rx_Buffer[5 + i] := 1000 + i;

							else
								if (CONF.Application_Commands.Configuration_Parameters_IDs[i] &gt;= 1000 and CONF.Application_Commands.Configuration_Parameters_IDs[i] &lt;= 1061) then

									DataExch_Tx_Rx_Buffer[5 + i] := CONF.Application_Commands.Configuration_Parameters_IDs[i];
								else
									Invalid_ID := true;

									i:= PIP_NbParams;
								end_if;

							end_if;
								
						end_for;
						
						if (not Invalid_ID) then

							(* taille des données de la requête en mots *)
							CIP_ReqDataSizeWords := PIP_NbParams + 1;
							CIP_Valid_Req := true;
						end_if;

					(* Requête d'ecriture PIP *)
					else	
						CIP_Valid_Req := false;
										
						PIP_Previous_ID_TLV_Size := 0;
						PIP_Current_Param_ID := 0;
						Explicit_Write_Cde_Register_flag := false;


						(* Scrutation des IDs pour constituer les TLV des données *)
						for i:= 0 to (PIP_NbParams - 1) do

							(* Get current Parameter ID *)
							PIP_Current_Param_ID := CONF.Application_Commands.Configuration_Parameters_IDs[i];
							
							if (PIP_Current_Param_ID &gt;= 1000 and PIP_Current_Param_ID &lt;= 1061) then

								CIP_Valid_Req := true;

								case PIP_Current_Param_ID of 	
									(* Write HMI address *)
									1000:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.SWTouch.HMI_Address;

									(* Write HMI baud rate *)
									1001:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										bytetmp1 := 0;
										case CONF.Application_Configuration.SWTouch.HMI_Baudrate of 
											9600   : bytetmp1 := 0;
											19200  : bytetmp1 := 1;
											38400  : bytetmp1 := 2;
											57600  : bytetmp1 := 3;
											115200 : bytetmp1 := 4;
										end_case;

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := bytetmp1;									
					
									(* Write HMI panel parameters *)
									1002:
										PIP_Current_Param_Type := 16#0D;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										WORD_AS_BYTE(CONF.Application_Configuration.SWTouch.HMI_Panel_Settings, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write HMI protection PassWord *)	
									1003:
										PIP_Current_Param_Type := 16#0B;
										PIP_Current_Param_Length := 16#04;
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										arint2tmp := STRING_TO_ASCII(CONF.Application_Configuration.SWTouch.HMI_PassWord);
										WORD_AS_BYTE(INT_TO_WORD(arint2tmp[0]), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(INT_TO_WORD(arint2tmp[1]), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Logicial Input I0 Setting *)
									1004:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.Logical_Inputs_Outputs.Input_I0_Settings;

									(* Write Logicial Input I1 Setting *)
									1005:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.Logical_Inputs_Outputs.Input_I1_Settings;

									(* Write Logical Inputs holding time *)
									1006:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Logical_Inputs_Outputs.Inputs_Holding_Time_ms)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], 
																											Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
								
									(* Write Logicial Outputs S0 &amp; S1 Setting *)
									1007:
										PIP_Current_Param_Type := 16#0D;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(CONF.Application_Configuration.Logical_Inputs_Outputs.Outputs_S0S1_Settings, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Coarse feed cut off point *)	
									1008:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										DINT_AS_WORD(CONF.Application_Configuration.Logical_Inputs_Outputs.Coarse_Feed_CutOff_Point, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Fine feed cut off point *)	
									1009:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										DINT_AS_WORD(CONF.Application_Configuration.Logical_Inputs_Outputs.Fine_Feed_CutOff_Point, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Fine Feed Mask time *)
									1010:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Logical_Inputs_Outputs.Fine_Feed_Mask_Time_ms)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], 
																											Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Logicial Output S2 Setting *)
									1011:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.Logical_Inputs_Outputs.Output_S2_Setting;

									(* Write S2 threshold Low Value *)	
									1012:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										DINT_AS_WORD(CONF.Application_Configuration.Logical_Inputs_Outputs.S2_Set_Point_Low_Value, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write S2 threshold High Value *)	
									1013:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										DINT_AS_WORD(CONF.Application_Configuration.Logical_Inputs_Outputs.S2_Set_Point_High_Value, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Logicial Output S3 Setting *)
									1014:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.Logical_Inputs_Outputs.Output_S3_Setting;

									(* Write S3 threshold Low Value *)	
									1015:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										DINT_AS_WORD(CONF.Application_Configuration.Logical_Inputs_Outputs.S3_Set_Point_Low_Value, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write S3 threshold High Value *)	
									1016:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										DINT_AS_WORD(CONF.Application_Configuration.Logical_Inputs_Outputs.S3_Set_Point_High_Value, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);
								
									(* Write AD Converter Setting *)
									1017:
										PIP_Current_Param_Type := 16#0D;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Filtering.AD_Converter_Settings)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], 
Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Low pass order Setting *)
									1018:
										PIP_Current_Param_Type := 16#0D;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Filtering.Low_Pass_Order)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4]);

									(* Write Low pass cut off frequency Setting *)
									1019:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(REAL_TO_INT(CONF.Application_Configuration.Filtering.Low_Pass_CutOff_Frequency*100.0)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], 
																										    Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Mean filter depth Setting *)
									1020:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Filtering.Mean_Filter_Depth)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Flow rate depth Setting *)
									1021:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Filtering.Flow_Filter_Depth)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Flow rate time Unit *)	
									1022:
										PIP_Current_Param_Type := 16#0B;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
									
										if(CONF.Application_Configuration.Filtering.Flow_Time_Unit = 'mn') then

											arint2tmp := STRING_TO_ASCII('mn');
											WORD_AS_BYTE(INT_TO_WORD(arint2tmp[0]), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4]);									
	
	
										else 
											if(CONF.Application_Configuration.Filtering.Flow_Time_Unit = 's') then
												arint2tmp := STRING_TO_ASCII('s ');
												WORD_AS_BYTE(INT_TO_WORD(arint2tmp[0]), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);	
											else 
												if(CONF.Application_Configuration.Filtering.Flow_Time_Unit = 'h') then
													arint2tmp := STRING_TO_ASCII('h ');
													WORD_AS_BYTE(INT_TO_WORD(arint2tmp[0]), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
												else
													CIP_Valid_Req := false;
												end_if;
											end_if;

										end_if;

									(* Write legal for trade &amp; sealing switch *)
									1023:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.LegalFor_Trade.Legal_Mode_Sealing_Switchs;

									(* Write Zero functions Setting *)
									1027:
										PIP_Current_Param_Type := 16#0D;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.LegalFor_Trade.Zero_functions)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Stability criterion setting *)
									1028:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.LegalFor_Trade.Stability_Criterion;

									(* Write Determinist tare-Zero time Setting *)
									1029:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.LegalFor_Trade.Zero_Tare_Specified_Time_ms)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], 
																										     Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
																	
									(* Write Preset tare setting *)	
									1030:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										UDINT_AS_WORD(CONF.Application_Configuration.LegalFor_Trade.Preset_Tare_Value, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);									
																																		
									(* Write Maximum capacity *)	
									1031:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										UDINT_AS_WORD(WERT.Maximum_Capacity, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);	

									(* Write Unit *)	
									1032:
										PIP_Current_Param_Type := 16#0B;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										arint2tmp := STRING_TO_ASCII(CONF.Application_Configuration.LegalFor_Trade.Unit);
										WORD_AS_BYTE(INT_TO_WORD(arint2tmp[0]), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6]);
										WORD_AS_BYTE(INT_TO_WORD(arint2tmp[1]), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4]);

									(* Write Scale interval *)
									1033:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Calibration.Scale_Interval)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Decimal point position *)
									1034:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.LegalFor_Trade.Decimal_Point_Position;

									(* Write Sensor sensitivity *)
									1035:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										udinttmp1 := REAL_TO_UDINT(WERT.Sensor_Sensitivity*100000.0);

										UDINT_AS_WORD(udinttmp1, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);	

									(* Write Zero sensitivity *)
									1036:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										dinttmp1 := REAL_TO_DINT(CONF.Application_Configuration.Calibration.Sensor_Zero_Sensitivity*100000.0);

										DINT_AS_WORD(dinttmp1, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);	

									(* Write Number of calibration segments *)
									1037:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(INT_TO_WORD(UINT_TO_INT(CONF.Application_Configuration.Calibration.Number_Of_Segments)), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

									(* Write Calibration load 1 *)	
									1038:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										UDINT_AS_WORD(WERT.Calibration_Load_1, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);						

									(* Write Calibration load 2 *)	
									1039:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										UDINT_AS_WORD(WERT.Calibration_Load_2, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Calibration load 3 *)	
									1040:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										UDINT_AS_WORD(WERT.Calibration_Load_3, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Calibration Zero Value *)	
									1041:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										DINT_AS_WORD(CONF.Application_Configuration.Calibration.User_Calibration_Zero_Value, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Global span coefficient *)	
									1042:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										udinttmp1 := REAL_TO_UDINT(CONF.Application_Configuration.Calibration.Global_SpanAdjustment_Coef*1000000.0);

										UDINT_AS_WORD(udinttmp1, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Span adjustment coefficient 1 *)	
									1043:
										PIP_Current_Param_Type := 16#09;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										REAL_AS_WORD(CONF.Application_Configuration.Calibration.Coef_Span_adjustment_1, wordtmp1, wordtmp2);
										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Span adjustment coefficient 2 *)	
									1044:
										PIP_Current_Param_Type := 16#09;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										REAL_AS_WORD(CONF.Application_Configuration.Calibration.Coef_Span_adjustment_2, wordtmp1, wordtmp2);
										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Span adjustment coefficient 3 *)	
									1045:
										PIP_Current_Param_Type := 16#09;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										REAL_AS_WORD(CONF.Application_Configuration.Calibration.Coef_Span_adjustment_3, wordtmp1, wordtmp2);
										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);

									(* Write Calibration place G *)	
									1046:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										udinttmp1 := REAL_TO_UDINT(CONF.Application_Configuration.Calibration.Calibration_Place_g_Value*1000000.0);

										UDINT_AS_WORD(udinttmp1, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);	

									(* Write Using place G *)	
									1047:
										PIP_Current_Param_Type := 16#0E;
										PIP_Current_Param_Length := 16#04;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										udinttmp1 := REAL_TO_UDINT(CONF.Application_Configuration.Calibration.Place_Of_Use_g_Value*1000000.0);

										UDINT_AS_WORD(udinttmp1, wordtmp1, wordtmp2);

										WORD_AS_BYTE(wordtmp1, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);
										WORD_AS_BYTE(wordtmp2, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 6], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 7]);	

									(* Write measurements value (ONLY READ ACCESS !!) *)	
									1024, 1025, 1026, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059:
										CIP_Valid_Req := false;

									(* Write Command register *)
									1056:
										PIP_Current_Param_Type := 16#02;
										PIP_Current_Param_Length := 16#02;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;

										WORD_AS_BYTE(CONF.Application_Commands.Explicit_Command_Register_Code, Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 5]);

										Explicit_Write_Cde_Register_flag := true;

										if (CONF.Application_Commands.Explicit_Command_Register_Code = 16#00D0) then

											Upload_RuntimeCfg_Done := false;

										end_if;
								
									(* Write Load cell wiring mode and Terminaison resistor  *)
									1058:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;

										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.LegalFor_Trade.LoadCell_Terminal_Resistor;
							
									(* Write Restoring calibration status *)
									1060:
										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := CONF.Application_Configuration.Calibration.Calibration_Restoring_status;

									(* Write fdr calibration and config usage options *)
									1061:
										bytetmp1 := 0;

										PIP_Current_Param_Type := 16#0C;
										PIP_Current_Param_Length := 16#01;	
								
										WORD_AS_BYTE(INT_TO_WORD(PIP_Current_Param_ID), Temp_Buffer_Data[PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 1]);

										bytetmp1.0 := CONF.Application_Configuration.Calibration.Ignored_DTM_Calibration;
										bytetmp1.1 := CONF.Application_Configuration.Ignored_DTM_Configuration;

										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 2] := PIP_Current_Param_Type;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 3] := PIP_Current_Param_Length;
										Temp_Buffer_Data[PIP_Previous_ID_TLV_Size + 4] := bytetmp1;


								end_case;
							else
								CIP_Valid_Req := false;

								 i := PIP_NbParams;
							end_if;

							if (CIP_Valid_Req) then 

								(* Size = 2Bytes_ID + 1Byte_Type + 1Byte_Length + (Lenght)Bytes_Value *)
								PIP_Previous_ID_TLV_Size := PIP_Previous_ID_TLV_Size + 4 + BYTE_TO_INT(PIP_Current_Param_Length);
							end_if;
						end_for;

						if (not (INT_TO_BOOL(MOD_INT(PIP_Previous_ID_TLV_Size, 2)))) then

							(* taille des données de la requête en mots *)
							CIP_ReqDataSizeWords := PIP_Previous_ID_TLV_Size/2 + 1;

						else
							(* taille des données de la requête en mots *)
							CIP_ReqDataSizeWords := PIP_Previous_ID_TLV_Size/2 + 2;

						end_if;

					end_if;							
					

				end_if;
				if (CIP_Valid_Req) then
					(* taille de la requête en mots *)
					CIP_ReqSizeWords := 3;
				end_if;
			end_if;
		end_if;

		if(CIP_Valid_Req) then

			if (PIP_RequestType) then

				j :=0;

				(* Convert Temp Receive BYTE array to INT array *)
				for i:= 0 to (CIP_ReqDataSizeWords) do	
											
					DataExch_Tx_Rx_Buffer[5 + i] := WORD_TO_INT(BYTE_AS_WORD(Temp_Buffer_Data[j], Temp_Buffer_Data[j + 1]));

					j := j + 2;
				end_for;

			end_if;

			(* Information du service de requête CIP : 
			Octet de poids fort = taille de la requête en mots
			Octet de poids faible = code du service EtherNet/IP *)
			DataExch_Tx_Rx_Buffer[0] := WORD_TO_INT(BYTE_AS_WORD(CIP_Service,
								INT_TO_BYTE(CIP_ReqSizeWords)));

			(* Information de classe de la requête CIP : 
			Octet de poids fort = classe
			Octet de poids faible = segment de classe (16#20) *)
			DataExch_Tx_Rx_Buffer[1] := WORD_TO_INT(BYTE_AS_WORD(16#20, CIP_Classe));

			(* Information d'instance de la requête CIP : 
			Octet de poids fort = instance (toujours 1 dans le cas présent)
			Octet de poids faible = segment d'instance : 16#24 *)
			DataExch_Tx_Rx_Buffer[2] := WORD_TO_INT(BYTE_AS_WORD(16#24, 16#01));

			(* Information d'attribut de la requête CIP : 
			Octet de poids fort = instance (toujours 1 dans le cas présent)
			Octet de poids faible = segment d'attribut : 16#30 *)
			DataExch_Tx_Rx_Buffer[3] := WORD_TO_INT(BYTE_AS_WORD(16#30, 16#01));

			(* taille de la requête en octets *)
			CIP_ReqSizeBytes := (CIP_ReqSizeWords + CIP_ReqDataSizeWords) * 2;

			(* Block time out de la requête en ms x100 ms *)
			Management_Param[2] := 10; (* 1s time out delay *)

			(* taille de la requête en octets *)
			Management_Param[3] := CIP_ReqSizeBytes + 2;

			CIP_X00 := false;
			CIP_X01 := true;

			CONF.Application_Status.Data_Exch_Error := false;
			CONF.Application_Status.Explicit_Error_Request := false;
			CONF.Application_Status.Explicit_Error_Sys := false;
			CONF.Application_Status.Explicit_Error_Cip := false;
		else
			CIP_X00 := false;
			CIP_X02 := true;

			CONF.Application_Status.Data_Exch_Error := false;
			CONF.Application_Status.Explicit_Error_Request := true;
			CONF.Application_Status.Explicit_Error_Sys := false;
			CONF.Application_Status.Explicit_Error_Cip := false;
		end_if;

	end_if;
elsif (CIP_X01) then
	(* DATA_EXCH *)
	if (not Management_Param[0].0) then
		(* Activité terminée *)

		(* Contrôle de la réponse *)
		(*Management_Param[1]  MSB : Rapport d'opération  LSB : Rapport de communication *)
		if (Management_Param[1] &lt;&gt; 0) then
			CONF.Application_Status.Data_Exch_Error := true;
			WORD_AS_BYTE(INT_TO_WORD(Management_Param[1]),
						OUT.Data_Exch_Com_Report,
						OUT.Data_Exch_Operation_Report);
		else
			if ((DataExch_Tx_Rx_Buffer[0] and 16#FF00) &lt;&gt; 0) then
				(* Erreur Système *)
				CONF.Application_Status.Explicit_Error_Sys := true;
				OUT.Explicit_SysError := ROL(DataExch_Tx_Rx_Buffer[1], 8);
			elsif (DataExch_Tx_Rx_Buffer[1] &lt;&gt; 0) then
				(* Erreur CIP *)
				CONF.Application_Status.Explicit_Error_Cip := true;
				CONF.Application_Status.Explicit_CipEtatGal := INT_TO_BYTE(DataExch_Tx_Rx_Buffer[1] and 16#00FF);
				CONF.Application_Status.Explicit_CipEtatEtenduLen := INT_TO_BYTE(
									ROL(DataExch_Tx_Rx_Buffer[1] and 16#FF00, 8));
			else
				(* Pas d'erreur CIP reponse, analyse des données PIP *)
				if (not PIP_RequestType) then
					(* PIP Read request *)
					
					(* Error in PIP response *)
					if ((DataExch_Tx_Rx_Buffer[2] and 16#FF00) &lt;&gt; 0) then
					 	CONF.Application_Status.Explicit_Pip_Error_Response := true;
					else 
						CONF.Application_Status.Explicit_Pip_Error_Response := false;
					end_if;

					if (not CONF.Application_Status.Explicit_Pip_Error_Response) then 

						if ((DataExch_Tx_Rx_Buffer[3] and 16#00FF) = PIP_NbParams) then 

							PIP_Previous_ID_TLV_Size := 0;
							PIP_Current_Param_ID := 0;

							j := 0;							

							(* Convert Receive INT array to BYTE array *)
							for i:= 0 to ((PIP_NbParams*4) + 4) do								

								wordtmp1 := INT_TO_WORD(DataExch_Tx_Rx_Buffer[i]);

								WORD_AS_BYTE (IN := (*WORD*)wordtmp1,
								              LOW =&gt; (*BYTE*)Temp_Buffer_Data[j],
								              HIGH =&gt; (*BYTE*)Temp_Buffer_Data[j + 1]);

								j := j + 2;

							end_for;

							(* Scrutation des IDs pour constituer les TLV des données *)
							for i:= 0 to (PIP_NbParams - 1) do

								(* Get current Parameter ID on combinaison of two next elements *)
								PIP_Current_Param_ID := WORD_TO_INT(BYTE_AS_WORD(Temp_Buffer_Data[7 + PIP_Previous_ID_TLV_Size], Temp_Buffer_Data[8 + PIP_Previous_ID_TLV_Size]));
								PIP_Current_Param_Type := Temp_Buffer_Data[9 + PIP_Previous_ID_TLV_Size];
								PIP_Current_Param_Length := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size];
																					
								case PIP_Current_Param_ID of 	
									(* Reading of HMI address *)
									1000:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.SWTouch.HMI_Address := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
																
									(* Reading of HMI baud rate *)
									1001:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then
											
											case BYTE_TO_INT(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1]) of 
												0 : udinttmp1 := 9600;
												1 : udinttmp1 := 19200;
												2 : udinttmp1 := 38400;
												3 : udinttmp1 := 57600;
												4 : udinttmp1 := 115200;
											end_case;											

											CONF.Application_Configuration.SWTouch.HMI_Baudrate := udinttmp1;
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;																
								
									(* Reading of HMI panel parameters *)
									1002:
										if (PIP_Current_Param_Type = 16#0D and PIP_Current_Param_Length = 16#02) then

											CONF.Application_Configuration.SWTouch.HMI_Panel_Settings := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	

									(* Reading of HMI protection PassWord *)	
									1003:
										if (PIP_Current_Param_Type = 16#0B and PIP_Current_Param_Length = 16#04) then
											
											arint2tmp[0] := WORD_TO_INT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]));

											arint2tmp[1] := WORD_TO_INT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]));

											CONF.Application_Configuration.SWTouch.HMI_PassWord := ASCII_TO_STRING(arint2tmp);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	

									(* Reading of Logicial Input I0 Setting *)
									1004:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.Logical_Inputs_Outputs.Input_I0_Settings := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Logicial Input I1 Setting *)
									1005:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.Logical_Inputs_Outputs.Input_I1_Settings := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;											
										
									(* Reading of Logical Inputs holding time *)
									1006:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
										
											CONF.Application_Configuration.Logical_Inputs_Outputs.Inputs_Holding_Time_ms := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
								
									(* Reading of Logicial Outputs S0 &amp; S1 Setting *)
									1007:
										if (PIP_Current_Param_Type = 16#0D and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
										
											CONF.Application_Configuration.Logical_Inputs_Outputs.Outputs_S0S1_Settings := wordtmp1;
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Coarse feed cut off point *)	
									1008:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Logical_Inputs_Outputs.Coarse_Feed_CutOff_Point := WORD_AS_DINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Fine feed cut off point *)	
									1009:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Logical_Inputs_Outputs.Fine_Feed_CutOff_Point := WORD_AS_DINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Fine Feed Mask time *)
									1010:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
										
											CONF.Application_Configuration.Logical_Inputs_Outputs.Fine_Feed_Mask_Time_ms := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Logicial Output S2 Setting *)
									1011:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.Logical_Inputs_Outputs.Output_S2_Setting := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	

									(* Reading of S2 threshold Low Value *)	
									1012:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Logical_Inputs_Outputs.S2_Set_Point_Low_Value := WORD_AS_DINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of S2 threshold High Value *)	
									1013:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Logical_Inputs_Outputs.S2_Set_Point_High_Value := WORD_AS_DINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Logicial Output S3 Setting *)
									1014:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.Logical_Inputs_Outputs.Output_S3_Setting := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of S3 threshold Low Value *)	
									1015:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Logical_Inputs_Outputs.S3_Set_Point_Low_Value := WORD_AS_DINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of S3 threshold High Value *)	
									1016:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Logical_Inputs_Outputs.S3_Set_Point_High_Value := WORD_AS_DINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
								
									(* Reading of AD Converter Setting *)
									1017:
										if (PIP_Current_Param_Type = 16#0D and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.Filtering.AD_Converter_Settings := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Low pass order Setting *)
									1018:
										if (PIP_Current_Param_Type = 16#0D and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.Filtering.Low_Pass_Order := INT_TO_UINT(ROL(WORD_TO_INT(wordtmp1), 8));
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Low pass cut off frequency Setting *)
									1019:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.Filtering.Low_Pass_CutOff_Frequency := UINT_TO_REAL(WORD_TO_UINT(wordtmp1))/100.0;
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Mean filter depth Setting *)
									1020:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.Filtering.Mean_Filter_Depth := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Flow rate depth Setting *)
									1021:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.Filtering.Flow_Filter_Depth := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Flow rate time Unit *)	
									1022:	
										if (PIP_Current_Param_Type = 16#0B and PIP_Current_Param_Length = 16#02) then

											arint2tmp2[0] := WORD_TO_INT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1]));
											CONF.Application_Configuration.Filtering.Flow_Time_Unit := ASCII_TO_STRING(arint2tmp2);

											if (CONF.Application_Configuration.Filtering.Flow_Time_Unit &lt;&gt; 'mn') then

												if(CONF.Application_Configuration.Filtering.Flow_Time_Unit = ' s') then

													CONF.Application_Configuration.Filtering.Flow_Time_Unit := 's';	
												else 
													CONF.Application_Configuration.Filtering.Flow_Time_Unit := 'h';													
												end_if;

											end_if;
										else
											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of legal for trade &amp; sealing switch *)
									1023:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.LegalFor_Trade.Legal_Mode_Sealing_Switchs := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	
									
									(* Reading of legal for trade Version *)
									1024:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.LegalFor_Trade.LegalForTrade_SW_Version := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
									
									(* Reading of legal for trade Counter *)
									1025:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.LegalFor_Trade.LegalForTrade_Counter := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
									
									(* Reading of legal for trade Checksum CRC16 *)
									1026:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.LegalFor_Trade.LegalForTrade_Checksum := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Zero functions Setting *)
									1027:
										if (PIP_Current_Param_Type = 16#0D and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											CONF.Application_Configuration.LegalFor_Trade.Zero_functions := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	

									(* Reading of Stability criterion setting *)
									1028:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.LegalFor_Trade.Stability_Criterion := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	

									(* Reading of Determinist tare-Zero time Setting *)
									1029:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
										
											CONF.Application_Configuration.LegalFor_Trade.Zero_Tare_Specified_Time_ms := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
																	
									(* Reading of Preset tare *)	
									1030:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.LegalFor_Trade.Preset_Tare_Value := WORD_AS_UDINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;								
																	
									(* Reading of Maximum capacity *)	
									1031:																				
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											WERT.Maximum_Capacity := WORD_AS_UDINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	
	
									(* Reading of Unit *)	
									1032:
										if (PIP_Current_Param_Type = 16#0B and PIP_Current_Param_Length = 16#04) then
																
											arint2tmp[0] := WORD_TO_INT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3]));
											arint2tmp[1] := WORD_TO_INT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1]));

											CONF.Application_Configuration.LegalFor_Trade.Unit := ASCII_TO_STRING(arint2tmp);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																
										end_if;

									(* Reading of Scale interval *)
									1033:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
										
											CONF.Application_Configuration.Calibration.Scale_Interval := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Decimal point position *)
									1034:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.LegalFor_Trade.Decimal_Point_Position := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;	

									(* Reading of Sensor sensitivity *)
									1035:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);
											
											udinttmp1 := WORD_AS_UDINT(wordtmp1, wordtmp2);

											WERT.Sensor_Sensitivity := UDINT_TO_REAL(udinttmp1)/100000.0;

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Zero sensitivity *)
									1036:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											dinttmp1 := WORD_AS_DINT(wordtmp1, wordtmp2);

											CONF.Application_Configuration.Calibration.Sensor_Zero_Sensitivity := DINT_TO_REAL(dinttmp1)/100000.0;

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Number of calibration segments *)
									1037:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
										
											CONF.Application_Configuration.Calibration.Number_Of_Segments := WORD_TO_UINT(wordtmp1);
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Calibration load 1 *)	
									1038:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											WERT.Calibration_Load_1 := WORD_AS_UDINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Calibration load 2 *)	
									1039:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											WERT.Calibration_Load_2 := WORD_AS_UDINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Calibration load 3 *)	
									1040:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											WERT.Calibration_Load_3 := WORD_AS_UDINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Calibration Zero Value *)	
									1041:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Calibration.User_Calibration_Zero_Value := WORD_AS_DINT(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Global span coefficient *)	
									1042:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											udinttmp1 := WORD_AS_UDINT(wordtmp1, wordtmp2);

											CONF.Application_Configuration.Calibration.Global_SpanAdjustment_Coef := UDINT_TO_REAL(udinttmp1)/1000000.0;

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Span adjustment coefficient 1 *)	
									1043:
										if (PIP_Current_Param_Type = 16#09 and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Calibration.Coef_Span_adjustment_1 := WORD_AS_REAL(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Span adjustment coefficient 2 *)	
									1044:
										if (PIP_Current_Param_Type = 16#09 and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Calibration.Coef_Span_adjustment_2 := WORD_AS_REAL(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Span adjustment coefficient 3 *)	
									1045:
										if (PIP_Current_Param_Type = 16#09 and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											CONF.Application_Configuration.Calibration.Coef_Span_adjustment_3 := WORD_AS_REAL(wordtmp1, wordtmp2);

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Calibration place G *)	
									1046:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											udinttmp1 := WORD_AS_UDINT(wordtmp1, wordtmp2);

											CONF.Application_Configuration.Calibration.Calibration_Place_g_Value := UDINT_TO_REAL(udinttmp1)/1000000.0;

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Using place G *)	
									1047:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											udinttmp1 := WORD_AS_UDINT(wordtmp1, wordtmp2);

											CONF.Application_Configuration.Calibration.Place_Of_Use_g_Value := UDINT_TO_REAL(udinttmp1)/1000000.0;
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Gross measurement value*)	
									1048:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											(*Module_Calling_Struct.Module_Status.Gross_Measurement := WORD_AS_DINT(wordtmp1, wordtmp2);*)

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;


									(* Reading of Net measurement value*)	
									1049:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											(*Module_Calling_Struct.Module_Status.Net_Measurement := WORD_AS_DINT(wordtmp1, wordtmp2);*)

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;


									(* Reading of Factory measurement value*)	
									1050:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											(*Module_Calling_Struct.Module_Status.Factory_Measurement := WORD_AS_DINT(wordtmp1, wordtmp2);*)

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;


									(* Reading of Tare value*)	
									1051:
										if (PIP_Current_Param_Type = 16#0E and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											(*Module_Calling_Struct.Module_Status.Tare_Value := WORD_AS_DINT(wordtmp1, wordtmp2);*)

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;


									(* Reading of Flow rate value*)	
									1052:
										if (PIP_Current_Param_Type = 16#09 and PIP_Current_Param_Length = 16#04) then

											wordtmp1 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]);
											wordtmp2 := BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 3], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 4]);

											(*Module_Calling_Struct.Module_Status.Flow_Rate_Value := WORD_AS_REAL(wordtmp1, wordtmp2);*)

										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;


									(* Reading of measurement status value*)	
									1054:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											(*Module_Calling_Struct.Module_Status.Measurement_Status := WORD_TO_UINT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]));*)
											;
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;


									(* Reading of device status *)	
									1055:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											(*Module_Calling_Struct.Module_Status.Device_Status := BYTE_AS_WORD(Temp_Receive_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Receive_Data[10 + PIP_Previous_ID_TLV_Size + 2]);*)
											;
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;


									(* Reading of Command register *)
									1056:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											CONF.Application_Status.Explicit_Cde_Register_RetCode := WORD_TO_UINT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]));
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
																		
									(* Reading of Response register *)
									1057:
										if (PIP_Current_Param_Type = 16#02 and PIP_Current_Param_Length = 16#02) then

											CONF.Application_Status.Implicit_Response_Register := WORD_TO_UINT(BYTE_AS_WORD(Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1], Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 2]));
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of Load cell wiring mode and Terminaison resistor  *)
									1058:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.LegalFor_Trade.LoadCell_Terminal_Resistor := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;
							
									(* Reading of Nb divisions value*)	
									(*1059:*)

									(* Reading of Restoring calibration status *)
									1060:
										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											CONF.Application_Configuration.Calibration.Calibration_Restoring_status := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

									(* Reading of fdr calibration and config usage options *)
									1061:
										bytetmp1 := 0;			

										if (PIP_Current_Param_Type = 16#0C and PIP_Current_Param_Length = 16#01) then

											bytetmp1 := Temp_Buffer_Data[10 + PIP_Previous_ID_TLV_Size + 1];

											CONF.Application_Configuration.Calibration.Ignored_DTM_Calibration := bytetmp1.0;
											CONF.Application_Configuration.Ignored_DTM_Configuration := bytetmp1.1;
										else

											CONF.Application_Status.Explicit_Pip_Error_Response := true;
																																	
										end_if;

								end_case;

								PIP_Previous_ID_TLV_Size := PIP_Previous_ID_TLV_Size + 4 + BYTE_TO_INT(PIP_Current_Param_Length);

							end_for;							
						end_if;
					end_if;
				else 
				(* PIP Write explicit request *)

					(* Error in PIP response *)
					if ((DataExch_Tx_Rx_Buffer[2] and 16#FF00) &lt;&gt; 0) then

					 	CONF.Application_Status.Explicit_Pip_Error_Response := true;

					else 

						CONF.Application_Status.Explicit_Pip_Error_Response := false;

					end_if;

					if (not CONF.Application_Status.Explicit_Pip_Error_Response) then 

						(* Explicit request on command register *)
						if (Explicit_Write_Cde_Register_flag) then

							Explicit_Write_Cde_Register_flag := false;

							CONF.Application_Status.Explicit_Cde_Register_RetCode := WORD_TO_UINT(CONF.Application_Commands.Explicit_Command_Register_Code);

							if (CONF.Application_Status.Explicit_Cde_Register_RetCode = 208) then

								Upload_RuntimeCfg_Done := false;
							end_if;

						end_if;									
					end_if;
				end_if;								
			end_if;
		end_if;
		CIP_X01 := false;
		CIP_X02 := true;
	end_if;
elsif (CIP_X02) then

	if (not CONF.Application_Commands.Execute_Explicit_Request) then

		CIP_X02 := false;
		CIP_X00 := true;
		PIP_Previous_ID_TLV_Size := 0;
		PIP_Current_Param_ID := 0;
		PIP_Current_Param_Length := 0;
		i:=0;
		j:=0;

		CONF.Application_Status.Data_Exch_Error := 0;
		CONF.Application_Status.Explicit_Error_Request := 0;
		CONF.Application_Status.Explicit_Error_Sys := 0;
		CONF.Application_Status.Explicit_Error_Cip := 0;
		OUT.Data_Exch_Com_Report := 0;
		OUT.Data_Exch_Operation_Report := 0;
		OUT.Explicit_SysError := 0;
		CONF.Application_Status.Explicit_Pip_Error_Request := 0;
		CONF.Application_Status.Explicit_Pip_Error_Response := 0;

		Save_CIP_Execute := false;
		Invalid_ID := false;

	end_if;

	if ((CONF.Application_Status.Module_RUN_State)  and not (CONF.Application_Status.Explicit_Pip_Error_Response) and not (Upload_RuntimeCfg_Done)) then

		Upload_RuntimeCfg_Done :=  true;

		PIP_Previous_ID_TLV_Size := 0;
		PIP_Current_Param_ID := 0;
		PIP_Current_Param_Length := 0;
		i:=0;
		j:=0;
		Invalid_ID := false;

	end_if;
end_if;

if (CIP_X01) then
tempstr1:=CONCAT_STR('0.0.3{',CIP_ADR);
EXCH_ADR:=CONCAT_STR(tempstr1,'}UNC.CIP');
	DATA_EXCH (ADR := ADDM(EXCH_ADR),
		TYP  := 1, (* Tranmit CIP Explicit request and Wait for Toolkit response *)
		EMIS := DataExch_Tx_Rx_Buffer,
		GEST := Management_Param,
		RECP =&gt; DataExch_Tx_Rx_Buffer);

end_if;


</STSource>
		</FBProgram>
		<FBProgram name="Wert">
			<FBDSource nbRows="24" nbColumns="36">
				<networkFBD>
					<FFBBlock instanceName=".1" typeName="DINT_TO_REAL" additionnalPinNumber="0" enEnO="false" width="9" height="5">
						<objPosition posX="45" posY="7"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="E_IO.Inputs.NetMeasurement"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".2" typeName="SEL" additionnalPinNumber="0" enEnO="false" width="7" height="7">
						<objPosition posX="71" posY="6"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="G" effectiveParameter="Sim"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN0"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="E_SIM"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_WEIGHT.X"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".3" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="72" posY="15"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="E_IO.Inputs.FlowRate"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_FR.X"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".4" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="86" posY="6"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="WEIGHT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".5" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="86" posY="15"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="FR"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".6" typeName="EXPT_REAL" additionnalPinNumber="0" enEnO="false" width="8" height="6">
						<objPosition posX="46" posY="12"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="10.0"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="CONF.Application_Configuration.LegalFor_Trade.Decimal_Point_Position"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="EXP"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".8" typeName="DIV_REAL" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="57" posY="7"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".10" typeName="DIV_REAL" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="58" posY="33"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="WERT.Maximum_Capacity"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_WEIGHT.ske"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".11" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="71" posY="38"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="M"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_WEIGHT.m"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".12" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="71" posY="43"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="0.0"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_WEIGHT.ska"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".14" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="90" posY="38"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_FR.m"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".15" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="90" posY="43"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_FR.ska"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".16" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="90" posY="33"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_FR.ske"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".17" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="90" posY="48"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_FR.typ"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".18" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="71" posY="48"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="0"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="AE_WEIGHT.typ"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".13" typeName="NE_UDINT" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="13" posY="55"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="WERT.Calibration_Load_1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="Load1tmp"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".19" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="30" posY="56"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="WERT.Calibration_Load_1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="Load1tmp"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".20" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="56" posY="61"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="3"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Number_Of_Parameters"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".21" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="78" posY="59"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Explicit_Request_Service"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".22" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="56" posY="66"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1038"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Configuration_Parameters_IDs[0]"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".24" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="34" posY="91"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="WERT.Sensor_Sensitivity"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="SENSENtmp"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".25" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="53" posY="91"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Number_Of_Parameters"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".26" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="67" posY="89"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Explicit_Request_Service"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".27" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="53" posY="98"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1035"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Configuration_Parameters_IDs[0]"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".23" typeName="NE_REAL" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="17" posY="85"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="WERT.Sensor_Sensitivity"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="SENSENtmp"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".7" typeName="NE_UDINT" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="13" posY="61"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="WERT.Calibration_Load_2"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="Load2tmp"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".9" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="30" posY="62"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="WERT.Calibration_Load_2"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="Load2tmp"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".30" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="56" posY="71"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1039"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Configuration_Parameters_IDs[1]"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".31" typeName="NE_UDINT" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="13" posY="67"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="WERT.Calibration_Load_3"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="Load3tmp"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".32" typeName="OR_BOOL" additionnalPinNumber="1" enEnO="false" width="7" height="7">
						<objPosition posX="44" posY="56"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN3"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".28" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="30" posY="68"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="WERT.Calibration_Load_3"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="Load3tmp"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".29" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="56" posY="76"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1040"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Configuration_Parameters_IDs[2]"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".33" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="34" posY="112"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.Application_Configuration.Ignored_DTM_Configuration"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="DTM1tmp"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".34" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="60" posY="112"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Number_Of_Parameters"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".35" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="75" posY="110"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Explicit_Request_Service"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".36" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="60" posY="118"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1061"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Configuration_Parameters_IDs[0]"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".37" typeName="NE" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="17" posY="106"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="CONF.Application_Configuration.Ignored_DTM_Configuration"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="DTM1tmp"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".38" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="56" posY="54"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Execute_Explicit_Request"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".39" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="53" posY="85"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Execute_Explicit_Request"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".40" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="60" posY="124"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Execute_Explicit_Request"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".41" typeName="OR_BOOL" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="48" posY="111"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".42" typeName="NE" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="16" posY="118"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="CONF.Application_Configuration.Calibration.Ignored_DTM_Calibration"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="DTM2tmp"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".43" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="33" posY="124"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.Application_Configuration.Calibration.Ignored_DTM_Calibration"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="DTM2tmp"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".44" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="60" posY="139"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Number_Of_Parameters"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".45" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="75" posY="137"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Explicit_Request_Service"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".46" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="60" posY="145"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1041"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Configuration_Parameters_IDs[0]"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".47" typeName="MOVE" additionnalPinNumber="0" enEnO="true" width="7" height="5">
						<objPosition posX="60" posY="151"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="1"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="CONF.Application_Commands.Execute_Explicit_Request"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="R_TRIG_2" typeName="R_TRIG" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="35" posY="138"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="CLK" effectiveParameter="CONF.Application_Status.Calibration_Done_Status"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<linkFB>
						<linkSource parentObjectName=".12" pinName="OUT">
							<objPosition posX="77" posY="47"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".15" pinName="IN">
							<objPosition posX="90" posY="47"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".11" pinName="OUT">
							<objPosition posX="77" posY="42"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".14" pinName="IN">
							<objPosition posX="90" posY="42"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName="R_TRIG_2" pinName="Q">
							<objPosition posX="41" posY="142"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".47" pinName="EN">
							<objPosition posX="60" posY="154"></objPosition>
						</linkDestination>
						<gridObjPosition posX="51" posY="142"></gridObjPosition>
						<gridObjPosition posX="51" posY="154"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".32" pinName="OUT">
							<objPosition posX="50" posY="60"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".38" pinName="EN">
							<objPosition posX="56" posY="57"></objPosition>
						</linkDestination>
						<gridObjPosition posX="54" posY="60"></gridObjPosition>
						<gridObjPosition posX="54" posY="57"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".41" pinName="OUT">
							<objPosition posX="54" posY="115"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".34" pinName="EN">
							<objPosition posX="60" posY="115"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".13" pinName="OUT">
							<objPosition posX="19" posY="59"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".19" pinName="EN">
							<objPosition posX="30" posY="59"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".3" pinName="OUT">
							<objPosition posX="78" posY="19"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".5" pinName="IN">
							<objPosition posX="86" posY="19"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".6" pinName="OUT">
							<objPosition posX="53" posY="16"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".10" pinName="IN2">
							<objPosition posX="58" posY="38"></objPosition>
						</linkDestination>
						<gridObjPosition posX="56" posY="16"></gridObjPosition>
						<gridObjPosition posX="56" posY="38"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".33" pinName="ENO">
							<objPosition posX="40" posY="115"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".41" pinName="IN1">
							<objPosition posX="48" posY="115"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".32" pinName="OUT">
							<objPosition posX="50" posY="60"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".29" pinName="EN">
							<objPosition posX="56" posY="79"></objPosition>
						</linkDestination>
						<gridObjPosition posX="54" posY="60"></gridObjPosition>
						<gridObjPosition posX="54" posY="79"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName="R_TRIG_2" pinName="Q">
							<objPosition posX="41" posY="142"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".46" pinName="EN">
							<objPosition posX="60" posY="148"></objPosition>
						</linkDestination>
						<gridObjPosition posX="51" posY="142"></gridObjPosition>
						<gridObjPosition posX="51" posY="148"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".10" pinName="OUT">
							<objPosition posX="64" posY="37"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".16" pinName="IN">
							<objPosition posX="90" posY="37"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".9" pinName="ENO">
							<objPosition posX="36" posY="65"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".32" pinName="IN2">
							<objPosition posX="44" posY="61"></objPosition>
						</linkDestination>
						<gridObjPosition posX="41" posY="65"></gridObjPosition>
						<gridObjPosition posX="41" posY="61"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="OUT">
							<objPosition posX="53" posY="11"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".8" pinName="IN1">
							<objPosition posX="57" posY="11"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".41" pinName="OUT">
							<objPosition posX="54" posY="115"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".36" pinName="EN">
							<objPosition posX="60" posY="121"></objPosition>
						</linkDestination>
						<gridObjPosition posX="58" posY="115"></gridObjPosition>
						<gridObjPosition posX="58" posY="121"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".34" pinName="ENO">
							<objPosition posX="66" posY="115"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".35" pinName="EN">
							<objPosition posX="75" posY="113"></objPosition>
						</linkDestination>
						<gridObjPosition posX="71" posY="115"></gridObjPosition>
						<gridObjPosition posX="71" posY="113"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".37" pinName="OUT">
							<objPosition posX="23" posY="110"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".33" pinName="EN">
							<objPosition posX="34" posY="115"></objPosition>
						</linkDestination>
						<gridObjPosition posX="29" posY="110"></gridObjPosition>
						<gridObjPosition posX="29" posY="115"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".28" pinName="ENO">
							<objPosition posX="36" posY="71"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".32" pinName="IN3">
							<objPosition posX="44" posY="62"></objPosition>
						</linkDestination>
						<gridObjPosition posX="42" posY="71"></gridObjPosition>
						<gridObjPosition posX="42" posY="62"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".23" pinName="OUT">
							<objPosition posX="23" posY="89"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".39" pinName="EN">
							<objPosition posX="53" posY="88"></objPosition>
						</linkDestination>
						<gridObjPosition posX="39" posY="89"></gridObjPosition>
						<gridObjPosition posX="39" posY="88"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".42" pinName="OUT">
							<objPosition posX="22" posY="122"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".43" pinName="EN">
							<objPosition posX="33" posY="127"></objPosition>
						</linkDestination>
						<gridObjPosition posX="28" posY="122"></gridObjPosition>
						<gridObjPosition posX="28" posY="127"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".24" pinName="ENO">
							<objPosition posX="40" posY="94"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".25" pinName="EN">
							<objPosition posX="53" posY="94"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".25" pinName="ENO">
							<objPosition posX="59" posY="94"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".26" pinName="EN">
							<objPosition posX="67" posY="92"></objPosition>
						</linkDestination>
						<gridObjPosition posX="64" posY="94"></gridObjPosition>
						<gridObjPosition posX="64" posY="92"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".2" pinName="OUT">
							<objPosition posX="77" posY="10"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".4" pinName="IN">
							<objPosition posX="86" posY="10"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".32" pinName="OUT">
							<objPosition posX="50" posY="60"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".30" pinName="EN">
							<objPosition posX="56" posY="74"></objPosition>
						</linkDestination>
						<gridObjPosition posX="54" posY="60"></gridObjPosition>
						<gridObjPosition posX="54" posY="74"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".20" pinName="ENO">
							<objPosition posX="62" posY="64"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".21" pinName="EN">
							<objPosition posX="78" posY="62"></objPosition>
						</linkDestination>
						<gridObjPosition posX="71" posY="64"></gridObjPosition>
						<gridObjPosition posX="71" posY="62"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".44" pinName="ENO">
							<objPosition posX="66" posY="142"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".45" pinName="EN">
							<objPosition posX="75" posY="140"></objPosition>
						</linkDestination>
						<gridObjPosition posX="71" posY="142"></gridObjPosition>
						<gridObjPosition posX="71" posY="140"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".32" pinName="OUT">
							<objPosition posX="50" posY="60"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".20" pinName="EN">
							<objPosition posX="56" posY="64"></objPosition>
						</linkDestination>
						<gridObjPosition posX="54" posY="60"></gridObjPosition>
						<gridObjPosition posX="54" posY="64"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".32" pinName="OUT">
							<objPosition posX="50" posY="60"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".22" pinName="EN">
							<objPosition posX="56" posY="69"></objPosition>
						</linkDestination>
						<gridObjPosition posX="54" posY="60"></gridObjPosition>
						<gridObjPosition posX="54" posY="69"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".31" pinName="OUT">
							<objPosition posX="19" posY="71"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".28" pinName="EN">
							<objPosition posX="30" posY="71"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".6" pinName="OUT">
							<objPosition posX="53" posY="16"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".8" pinName="IN2">
							<objPosition posX="57" posY="12"></objPosition>
						</linkDestination>
						<gridObjPosition posX="56" posY="16"></gridObjPosition>
						<gridObjPosition posX="56" posY="12"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".43" pinName="ENO">
							<objPosition posX="39" posY="127"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".41" pinName="IN2">
							<objPosition posX="48" posY="116"></objPosition>
						</linkDestination>
						<gridObjPosition posX="46" posY="127"></gridObjPosition>
						<gridObjPosition posX="46" posY="116"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".23" pinName="OUT">
							<objPosition posX="23" posY="89"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".24" pinName="EN">
							<objPosition posX="34" posY="94"></objPosition>
						</linkDestination>
						<gridObjPosition posX="29" posY="89"></gridObjPosition>
						<gridObjPosition posX="29" posY="94"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".18" pinName="OUT">
							<objPosition posX="77" posY="52"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".17" pinName="IN">
							<objPosition posX="90" posY="52"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName="R_TRIG_2" pinName="Q">
							<objPosition posX="41" posY="142"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".44" pinName="EN">
							<objPosition posX="60" posY="142"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".41" pinName="OUT">
							<objPosition posX="54" posY="115"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".40" pinName="EN">
							<objPosition posX="60" posY="127"></objPosition>
						</linkDestination>
						<gridObjPosition posX="58" posY="115"></gridObjPosition>
						<gridObjPosition posX="58" posY="127"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".24" pinName="ENO">
							<objPosition posX="40" posY="94"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".27" pinName="EN">
							<objPosition posX="53" posY="101"></objPosition>
						</linkDestination>
						<gridObjPosition posX="47" posY="94"></gridObjPosition>
						<gridObjPosition posX="47" posY="101"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".7" pinName="OUT">
							<objPosition posX="19" posY="65"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".9" pinName="EN">
							<objPosition posX="30" posY="65"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".8" pinName="OUT">
							<objPosition posX="63" posY="11"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".2" pinName="IN0">
							<objPosition posX="71" posY="11"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".19" pinName="ENO">
							<objPosition posX="36" posY="59"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".32" pinName="IN1">
							<objPosition posX="44" posY="60"></objPosition>
						</linkDestination>
						<gridObjPosition posX="41" posY="59"></gridObjPosition>
						<gridObjPosition posX="41" posY="60"></gridObjPosition>
					</linkFB>
					<textBox width="103" height="29">Meßwert bilden
    <objPosition posX="0" posY="0"></objPosition>
					</textBox>
					<textBox width="103" height="27">DTM Ignorieren<objPosition posX="0" posY="105"></objPosition>
					</textBox>
					<textBox width="103" height="21">Kennwertt ändern<objPosition posX="0" posY="84"></objPosition>
					</textBox>
					<textBox width="103" height="25">Max Bilden<objPosition posX="0" posY="29"></objPosition>
					</textBox>
					<textBox width="103" height="27">Todgewicht lesen<objPosition posX="0" posY="132"></objPosition>
					</textBox>
					<textBox width="103" height="30">Eichgewicht  ändern<objPosition posX="0" posY="54"></objPosition>
					</textBox>
				</networkFBD>
			</FBDSource>
		</FBProgram>
		<FBProgram name="Melden">
			<FBDSource nbRows="24" nbColumns="36">
				<networkFBD>
					<FFBBlock instanceName=".1" typeName="OR_BOOL" additionnalPinNumber="3" enEnO="false" width="7" height="9">
						<objPosition posX="35" posY="15"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="CONF.Application_Commands.Start_Physical_Calibration"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="CONF.Application_Commands.Zero_adjustment"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN3"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN4"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN5"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".7" typeName="OR_BOOL" additionnalPinNumber="3" enEnO="false" width="7" height="9">
						<objPosition posX="45" posY="6"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN1" effectiveParameter="E_IO.Inputs.SPI_ERROR"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN2" effectiveParameter="E_IO.Inputs.INIT_PARAM_CORRUPTED_ERROR"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN3" effectiveParameter="E_IO.Inputs.RUNTIME_CONFIGURATION_ERROR"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN4" effectiveParameter="E_IO.Inputs.CONTROL_FW_MISSING_OR_CORRUPTED"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN5"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="ERROR"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_1" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="42"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CIP_X02"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.0"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_2" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="48"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.Application_Status.Explicit_Error_Request"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.1"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_3" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="54"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.Application_Status.Data_Exch_Error"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.2"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_4" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="60"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.application_status.Explicit_Error_Sys"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.3"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_5" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="66"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.application_status.Explicit_Error_Cip"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.4"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_6" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="72"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.application_status.Explicit_Pip_Error_Request"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.5"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_7" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="78"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.application_status.Explicit_Pip_Error_Response"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.6"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_8" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="31" posY="84"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.Application_Status.Calibration_Error_Status"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.7"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="TOF_9" typeName="TOF" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="66" posY="43"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.Application_Status.Calibration_Done_Status"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="PT" effectiveParameter="T#1s"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q" effectiveParameter="OUT.MS1.8"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="ET"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".2" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="45" posY="23"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="OUT.MS1.9"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".3" typeName="MOVE" additionnalPinNumber="0" enEnO="false" width="7" height="5">
						<objPosition posX="66" posY="49"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="IN" effectiveParameter="CONF.application_status.Stability_flag"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="OUT" effectiveParameter="OUT.MS1.10"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName="SR_1" typeName="SR" additionnalPinNumber="0" enEnO="false" width="7" height="6">
						<objPosition posX="63" posY="23"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="S1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="R" effectiveParameter="quitt"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="Q1"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<FFBBlock instanceName=".4" typeName="BIT_AS_DWORD" additionnalPinNumber="29" enEnO="false" width="10" height="36">
						<objPosition posX="81" posY="7"></objPosition>
						<descriptionFFB execAfter="">
							<inputVariable invertedPin="false" formalParameter="EN"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B0"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B1"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B2" effectiveParameter="LSP"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B3"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B4"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B5"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B6"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B7" effectiveParameter="CONF.application_status.Stability_flag"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B8"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B9" effectiveParameter="CONF.Application_Commands.Zero_adjustment"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B10"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B11"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B12"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B13"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B14"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B15" effectiveParameter="MSP"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B16"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B17"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B18"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B19"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B20"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B21" effectiveParameter="ASP"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B22"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B23"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B24"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B25"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B26" effectiveParameter="ERROR"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B27"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B28"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B29"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B30" effectiveParameter="SIM"></inputVariable>
							<inputVariable invertedPin="false" formalParameter="B31"></inputVariable>
							<outputVariable invertedPin="false" formalParameter="ENO"></outputVariable>
							<outputVariable invertedPin="false" formalParameter="A" effectiveParameter="M"></outputVariable>
						</descriptionFFB>
					</FFBBlock>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="OUT">
							<objPosition posX="41" posY="19"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".4" pinName="B8">
							<objPosition posX="81" posY="19"></objPosition>
						</linkDestination>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".1" pinName="OUT">
							<objPosition posX="41" posY="19"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".2" pinName="IN">
							<objPosition posX="45" posY="27"></objPosition>
						</linkDestination>
						<gridObjPosition posX="44" posY="19"></gridObjPosition>
						<gridObjPosition posX="44" posY="27"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".7" pinName="OUT">
							<objPosition posX="51" posY="10"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".4" pinName="B0">
							<objPosition posX="81" posY="11"></objPosition>
						</linkDestination>
						<gridObjPosition posX="67" posY="10"></gridObjPosition>
						<gridObjPosition posX="67" posY="11"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName=".7" pinName="OUT">
							<objPosition posX="51" posY="10"></objPosition>
						</linkSource>
						<linkDestination parentObjectName="SR_1" pinName="S1">
							<objPosition posX="63" posY="27"></objPosition>
						</linkDestination>
						<gridObjPosition posX="58" posY="10"></gridObjPosition>
						<gridObjPosition posX="58" posY="27"></gridObjPosition>
					</linkFB>
					<linkFB>
						<linkSource parentObjectName="SR_1" pinName="Q1">
							<objPosition posX="69" posY="27"></objPosition>
						</linkSource>
						<linkDestination parentObjectName=".4" pinName="B16">
							<objPosition posX="81" posY="27"></objPosition>
						</linkDestination>
					</linkFB>
				</networkFBD>
			</FBDSource>
		</FBProgram>
	</FBSource>
</FBDExchangeFile>
