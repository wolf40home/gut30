/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	
// 	FILE:	UAG_ProcessAnalyst.ci
//
//	Beschreibung:
//
//		Enthält Funktionen die für den Prozess Analyst benötigt werden.
//		Funktionen mit Version 3. sind freigegeben
//
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	01.12.09	/	Schneider Electrik GmbH

//	Version				75.33.11.08
//
//	PUBLIC FUNCTIONS:
//
//			UAG_PA_PageLoad()
//			CSV_PA_ToggleDifferenceCursors
//			CSV_PA_RemoveDifferenceCursors(
//			CSV_PA_AddDifferenceCursors(
//			CSV_PA_AddDifferenceCursorColumn
//			CSV_PA_RemoveDifferenceCursorColumn(
//			CSV_PA_UpdateDifferenceCursorColumn(
//			CSV_PA_GetCommandPressedState(
//			CSV_PA_ShowCursors(
//			CSV_PA_CreateMainToolbarButton
//			CSV_PA_LoadPavFile(
//			UAG_PA_LoadTrendGroup()
//			UAG_PA_SelectPane()						abgekündigt
//			UAG_PA_PageGruppe()
//			UAG_PA_Anzeige()
//			UAG_PA_PageGruppe()
//			UAG_PA_Anzeige_Stift()
//			UAG_PA_Code()
//			UAG_PA_ANA()
//			UAG_PA_GWOH
//			UAG_PA_DOS()
//			UAG_PA_INT()
//			UAG_PA_REG()
//			GUT_PA_STEP3()
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	16.04.14	Steiner		Alle Funktionen auf 7.40 Page Funktionen umgestellt
//	29.11.16	Steiner		Farbtafel an die Geniefarben angepasst.


//	MODULE VARIABLES

// The Pane List Object
// -------------------
// A list is used to display a list of PA panes when the user wishes to add a trend group.
// This list handle enables reuse of the list object for subsequent calls.
INT		mhPaneList = -1;

// Preconfigured PAV Files
// -----------------------
// The Example page FOR the Process Analyst will attempt to load the PAV file that
// is most relevant to the users last action. For example, if the user was viewing
// the Loops Page, looppage.pav is loaded. If a user is viewing any of the Alarms
// pages, the PAV specified below by msAlarmsPav below is used. In the event that 
// no specific PAV makes sense, the msDefaultPav below is used.
//STRING	msDefaultPav = "example.pav";
//STRING	msAlarmsPav = "alarms.pav";
//

// Standard Command Identifiers
// ----------------------------
// The PA example page piggy backs some functionality onto standard user actions. These
// actions are identified by StandardCommand IDs which are hard coded into the PA
// source code. These values must be kept consistent with the PA source.
STRING	StandardCommands_LoadConfig_ID 				= "Citect_Command_LoadConfig";
STRING	StandardCommands_ToggleCursorVisibility_ID 	= "Citect_Command_ToggleCursorVisibility";

// Custom Command Identifiers
// --------------------------
// The PA example page adds custom buttons to the Process Analyst. These globals hold the
// custom command identifiers for the buttons to enable the correct action to be taken when
// one is executed by the user.
STRING	msLoadTrendGroupID 	= "";
STRING	msPlayDemoID 		= "";
STRING	msStopDemoID 		= "";
STRING	msDiffCursorsID 	= ""

// State Variables
// --------------------
// The variable hold the current state of the demo move in the example PA page.
INT		mbDemoRunning 		= 0;
INT		mnCurrentPavIndex 	= 0;
// The loaded variable blocks the processing of the events while a PAV is loading
INT		mbPavLoading		= 0;

// Difference Cursor Variables
// ---------------------------
// The "Difference Cursor" functionality is a custom PA command implemented entirely 
// in CiCode. Since the name of the Cursors and the name of the custom ListView 
// column need to be internationalized, some strings are stored here as globals and
// initialized on page entry.
STRING 	msDiffColumnName 	= "Difference Cursor";
STRING 	msDiffCursor1Name;
STRING 	msDiffCursor2Name;
STRING	msDiffColumnText;
//216,216,216 Grau
//INT 	miFarbe[12] [2] = 0,0,1 ,1507980,2,16711680,3,32000,4,16724838,5,13276,6,32109,7,16724940, 8, 65535, 9, 16776960,10,16777215, 11, 16776960
INT 	miFarbe[16] [2] = 0,10066329,1 ,0,2,255,3,2856447,4,16777215,5,16755285,6,65535,7,12566463, 8, 32000, 9, 16711680,10,65280, 11, 16776960 ,12, 128,13,16711935,14,10066329
// Farbnummern
// 1 = Schwarz 
// 2 = rot 
// 3 = orange
// 4 = weiss 
// 5 = blau
// 6 = Gelb
// 7 = grau
// 8 = grün
// 9 = dunkelblau
// 10 = Hellgrün
// 11 = Hellblau
// 12 = dunkelrot
// 13 = Violet

GLOBAL STRING gsTrendSelectedDesc;

//MODULE VARIABLES TAG Value
REAL	mrTrendTagData[1];
INT		miRunLoop;
STRING	msOldPageCount = "0";
STRING	msNewPageCount = "0";
OBJECT	mhCommandSystem;
OBJECT	mhCommand;

//	aFarbe()
//	Übergabeparameter:	 RGB Farben     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Platzhalter	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	02.12.09	/	Schneider Electrik GmbH
//	Version				3.1.1.7
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	
INT FUNCTION aFarbe(INT ired, INT igreen, INT iblue)
RETURN ired+igreen*256+iblue*65536
END

//	UAG_PA_PageLoad()
//	Übergabeparameter:	 ---     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Code für Analyst Seite	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	02.12.09	/	Schneider Electrik GmbH
//	Version				7.2.3.14
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	

FUNCTION UAG_PA_PageLoad(INT iFp=0)
UAG_PA_Code(iFp)
END
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						E_CSV_PA_HorizontalAxisChanged()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Event handler called when the PA Horizontal (time) axis is moved for a particular Pen.
//				
// 		ARGUMENTS:
//
//			hThis - a handle to the PA object
//			hPen  - a handle to the Pen which has had its axis moved.
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		IF Difference Cursors are Enabled
//			Update the Difference Cursor Column
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION 
E_CSV_PA_HorizontalAxisChanged(OBJECT hThis, OBJECT hPen)

	INT bDiffCursorsEnabled = 0;
	
	IF mbPavLoading = 0 THEN	
		bDiffCursorsEnabled = CSV_PA_GetCommandPressedState(hThis, msDiffCursorsID);
		
		IF bDiffCursorsEnabled <> 0 THEN
			CSV_PA_UpdateDifferenceCursorColumn(hThis);
		END
	END
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						E_CSV_PA_CursorMoved()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Event handler called when a PA Cursor has moved.
//				
// 		ARGUMENTS:
//
//			hThis 	- a handle to the PA object
//			hCursor	- a handle to the Cursor which has moved.
//			nPosition - The new position
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		IF Difference Cursors are Enabled
//			Update the Difference Cursor Column
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION 
E_CSV_PA_CursorMoved(OBJECT hThis, OBJECT hCursor, INT nPosition)

	INT bDiffCursorsEnabled = 0;
	
	IF mbPavLoading = 0 THEN	
		bDiffCursorsEnabled = CSV_PA_GetCommandPressedState(hThis, msDiffCursorsID);
		
		IF bDiffCursorsEnabled <> 0 THEN
			CSV_PA_UpdateDifferenceCursorColumn(hThis);
		END
	END
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						E_CSV_PA_CommandExecuted()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Event handler called when a PA Command is Executed.
//			Note : PA Code associated with the command has already been called.
//				
// 		ARGUMENTS:
//
//			hThis 	- a handle to the PA object
//			nCommandId - The ID for the command that was executed
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		SWITCH CommandID
//			CASE New PAV was Loaded
//				Add and configure custom buttons to the PA
//			CASE Trend Group custom button pressed
//				Executed code to choose pane and group
//			CASE Difference Cursors custom button pressed
//				Toggle the difference cursor function
//		END
//	
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION 
E_CSV_PA_CommandExecuted(OBJECT hThis, STRING sCommandId)

	SELECT CASE sCommandId
	
	CASE StandardCommands_LoadConfig_ID 
		CSV_PA_ConfigureCustomButtons(hThis);
		CSV_PA_UpdateCustomButtons(hThis);
		
	CASE msLoadTrendGroupID 
		UAG_PA_LoadTrendGroup(hThis);
		
	CASE msDiffCursorsID 
		CSV_PA_ToggleDifferenceCursors(hThis);
		
	END SELECT 
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_ToggleDifferenceCursors()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Toggle the difference cursor functionality
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA object
//			
//     	RETURNED VALUE: 
//
//			INT - Non Zero if the difference cursors are on else zero
//
//		PSEUDO CODE:
//
//			Get state of the Difference Cursor Button
//			IF NOT Button Pressed THEN
//				Remove the difference cursors
//			ELSE
//				Add the two difference cursors
//				Add the "Difference" column
//				Turn PA cursors on (make visible)
//			END
//
//			NOTE : "Difference" Column cannot currently be removed (List View
//					Interface does not support it).
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
INT
FUNCTION
CSV_PA_ToggleDifferenceCursors(OBJECT hAnalyst)

	OBJECT hCursors = _ObjectGetProperty(hAnalyst, "Cursors");
	INT bDiffCursorsEnabled = CSV_PA_GetCommandPressedState(hAnalyst, msDiffCursorsID);
	
	IF bDiffCursorsEnabled = 0 THEN
		
		CSV_PA_RemoveDifferenceCursors(hCursors);	
		CSV_PA_RemoveDifferenceCursorColumn(hAnalyst);		
	ELSE
		CSV_PA_AddDifferenceCursors(hCursors);	
		CSV_PA_AddDifferenceCursorColumn(hAnalyst);
		CSV_PA_ShowCursors(hAnalyst);
	END

	RETURN bDiffCursorsEnabled;
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_RemoveDifferenceCursors()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Remove difference cursors functionality
//				
// 		ARGUMENTS:
//
//			hCursors	- a handle to the PA cursors collection
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		Resolve difference cursors by name and delete them
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_RemoveDifferenceCursors(OBJECT hCursors)

	ErrSet(1);
	IsError();
	
	OBJECT hDiffCursor1;
	OBJECT hDiffCursor2;
	
	hDiffCursor1 = _ObjectCallMethod(hCursors, "get_ItemByName", msDiffCursor1Name);

	IF IsError() = 0 THEN
		_ObjectCallMethod(hDiffCursor1, "Delete");
	END

	hDiffCursor2 = _ObjectCallMethod(hCursors, "get_ItemByName", msDiffCursor2Name);

	IF IsError() = 0 THEN
		_ObjectCallMethod(hDiffCursor2, "Delete");
	END
	
	IsError();
	ErrSet(0);
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_AddDifferenceCursors()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Adds difference cursors (2)
//				
// 		ARGUMENTS:
//
//			hCursors	- a handle to the PA cursors collection
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		Create difference cursors with predefined names
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_AddDifferenceCursors(OBJECT hCursors)

	ErrSet(1);
	IsError();

	OBJECT hDiffCursor1 = _ObjectCallMethod(hCursors, "Create", msDiffCursor1Name, 100);
	OBJECT hDiffCursor2 = _ObjectCallMethod(hCursors, "Create", msDiffCursor2Name, 200);

	IsError();
	ErrSet(0);
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_AddDifferenceCursorColumn()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Add difference cursors List View Column
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA Object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		Create "Difference" List View Column with predefined name
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_AddDifferenceCursorColumn(OBJECT hAnalyst)

	ErrSet(1);
	IsError();

	OBJECT hObjectView 			= _ObjectGetProperty(hAnalyst, "ObjectView");
	OBJECT hObjectViewColumns 	= _ObjectGetProperty(hObjectView , "Columns");
	_ObjectCallMethod(hObjectViewColumns , "Add", msDiffColumnName, msDiffColumnText, 130);
	
	IsError();
	ErrSet(0);
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_RemoveDifferenceCursorColumn()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Remove difference cursors List View Column
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA Object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_RemoveDifferenceCursorColumn(OBJECT hAnalyst)

	ErrSet(1);
	IsError();

	OBJECT hObjectView 			= _ObjectGetProperty(hAnalyst, "ObjectView");
	OBJECT hObjectViewColumns 	= _ObjectGetProperty(hObjectView , "Columns");
	_ObjectCallMethod(hObjectViewColumns , "Remove", msDiffColumnName);
	
	IsError();
	ErrSet(0);
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_UpdateDifferenceCursorColumn()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Updates difference cursors List View column
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA Object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		Create "Difference" List View Column with predefined name
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_UpdateDifferenceCursorColumn(OBJECT hAnalyst)

	ErrSet(1);
	IsError();

	OBJECT 	hObjectView;
	OBJECT 	hObjectViewPaneItems;
	OBJECT 	hObjectViewPenItems;
	OBJECT 	hObjectViewItem;

	OBJECT 	hPanes;
	OBJECT 	hPane;
	INT		nPaneCount;	
	INT		nPaneIter;

	OBJECT 	hPens;
	OBJECT 	hPen;
	INT		nPenCount;	
	INT		nPenIter;
	
	OBJECT	hCursors;
	OBJECT	hDiffCursor1;
	OBJECT	hDiffCursor2;

	INT		bLocalTime = -1;
	REAL	rTimeValue;
	INT		nMillisecondValue;
	STRING	sDiffCursor1Val;
	STRING	sDiffCursor2Val;
	REAL	rDiffCursor1Val;
	REAL	rDiffCursor2Val;
	STRING	sCursorDifference;
		
	// Retrieve the Object View
	hObjectView = _ObjectGetProperty(hAnalyst, "ObjectView");
	hObjectViewPaneItems = _ObjectGetProperty(hObjectView , "Items");
	
	// Retrieve the panes
	hPanes		= _ObjectGetProperty(hAnalyst, "Panes");
	nPaneCount	= _ObjectGetProperty(hPanes, "Count");
	
	// Get the difference cursors
	hCursors	 = _ObjectGetProperty(hAnalyst, "Cursors");
	hDiffCursor1 = _ObjectCallMethod(hCursors, "get_ItemByName", msDiffCursor1Name );
	hDiffCursor2 = _ObjectCallMethod(hCursors, "get_ItemByName", msDiffCursor2Name );
	
	// Cannot continue without the OV, panes or cursors
	IF IsError() <> 0 THEN
		ErrSet(0);
		RETURN;
	END
	
	FOR nPaneIter = 1 TO nPaneCount DO
	
		// Get object view Item and sub Items collection corresponing to this Pane
		hObjectViewItem		= _ObjectCallMethod(hObjectViewPaneItems, "get_Item", nPaneIter);
		hObjectViewPenItems	= _ObjectGetProperty(hObjectViewItem, "Items");
		
		// Get the Pens collection (and count)  corresponding to this pane
		hPane 				= _ObjectCallMethod(hPanes, "get_Item", nPaneIter);
		hPens				= _ObjectGetProperty(hPane , "Pens");
		nPenCount			= _ObjectGetProperty(hPens , "Count");
		
		FOR nPenIter = 1 TO nPenCount DO
		
			// Get the matching Pen Item and ListView sub-item pair
			hPen 			= _ObjectCallMethod(hPens, "get_Item", nPenIter );
			hObjectViewItem	= _ObjectCallMethod(hObjectViewPenItems, "get_Item", nPenIter );
			
			IF IsError() = 0 THEN
			
				// Get diff cursor values for this pen
				_ObjectCallMethod(hDiffCursor1, "GetValue", hPen, bLocalTime, rTimeValue, nMillisecondValue, sDiffCursor1Val);
				_ObjectCallMethod(hDiffCursor2, "GetValue", hPen, bLocalTime, rTimeValue, nMillisecondValue, sDiffCursor2Val);
				
				IF IsError() = 0 THEN
					
					// Calculate difference and update the List View item
					rDiffCursor1Val = StrToReal(sDiffCursor1Val);
					rDiffCursor2Val = StrToReal(sDiffCursor2Val);
					sCursorDifference = RealToStr(rDiffCursor2Val - rDiffCursor1Val, 15, 5)

					_ObjectCallMethod(hObjectViewItem, "PutField", msDiffColumnName, sCursorDifference);
					
				END
			END
		END
	END			

	IsError();
	ErrSet(0);
END




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_GetCommandPressedState()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Gets the pressed state of a command (and its button(s))
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA Object
//			nCommandId	- ID of the command in question
//			
//     	RETURNED VALUE: 
//
//			Non-Zero if state is pressed else zero
//
//		PSEUDO CODE:
//
//		Get the command reference from the Command System
//		Get the "Pressed" attribute from the command
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
INT 
FUNCTION
CSV_PA_GetCommandPressedState(OBJECT hAnalyst, STRING sCommandId)

	ErrSet(1);
	IsError();

	OBJECT	hCommandSystem 			= _ObjectGetProperty(hAnalyst, "CommandSystem");
	OBJECT	hToggleCursorCommand	= _ObjectCallMethod(hCommandSystem, "get_ItemById", sCommandId);
	INT		bPressedState = 0;
	
	IF IsError() = 0 THEN
		bPressedState = _ObjectGetProperty(hToggleCursorCommand, "Pressed");
	END
	IsError();
	ErrSet(0);
	RETURN bPressedState;


END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_ShowCursors()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Make PA Cursors visible
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA Object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		Get the command reference from the Command System
//		Get the "ToggleCursorCommand" command object
//		IF Command is NOT Pressed
//			Execute the command
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_ShowCursors(OBJECT hAnalyst)

	ErrSet(1);
	IsError();

	OBJECT	hCommandSystem 			= _ObjectGetProperty(hAnalyst, "CommandSystem");
	OBJECT	hToggleCursorCommand	= _ObjectCallMethod(hCommandSystem, "get_ItemById", StandardCommands_ToggleCursorVisibility_ID);
	
	INT		bCursorsVisible = -1;
	bCursorsVisible = _ObjectGetProperty(hToggleCursorCommand, "Pressed");
	
	IF bCursorsVisible = 0 THEN
		_ObjectCallMethod(hCommandSystem, "Execute", StandardCommands_ToggleCursorVisibility_ID);
	END

	IsError();
	ErrSet(0);
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_CreateMainToolbarButton()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Create a new toolbar command and button
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA Object
//			sCommandId	- ID for the command behind the button
//			sButtonName - name (tooltip) for the button
//			sIconName	- Icon name for the button
//			eButtonType - Button type (toggle/push)
//			
//     	RETURNED VALUE: 
//
//			STRING- Command ID behind the new button or "" if unsuccessful
//
//		PSEUDO CODE:
//
//		NOTE: Icon Name must not contain path, but this icon MUST exist in the 
//		current project directory ([RUN]) in order for this to succeed.
//
//		Obtain a reference to the CommandSystem
//		Construct the Full IconPath	
//		IF Icon Exists THEN
//			Create Command with Name, button type and Icon
//			Get the command ID
//			Add a button to the main toolbar bound to this command
//		END
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
STRING
FUNCTION
CSV_PA_CreateMainToolbarButton(OBJECT hAnalyst, STRING sCommandId, STRING sButtonName, STRING sIconName, INT eButtonType)

	ErrSet(1);
	IsError();
	
	OBJECT	hCommandSystem 	= _ObjectGetProperty(hAnalyst, "CommandSystem");
	OBJECT	hCommand;
	
	IF IsError() = 0 THEN
		sIconName	= PathToStr("[RUN]:") + sIconName;
		
		IF FileExist(sIconName) THEN
			hCommand	= _ObjectCallMethod(hCommandSystem, "Create", sCommandId, eButtonType, sButtonName, sIconName, 0);
			sCommandId	= _ObjectGetProperty(hCommand, "CommandId");
			
			IF IsError() = 0 THEN
				sCommandId = CSV_PA_AddCommandToMainToolbar(hAnalyst, sCommandId);
			END
		END
	END

	IsError();
	ErrSet(0);

	RETURN sCommandId;
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_AddCommandToMainToolbar()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Create a new toolbar button based on a command
//				
// 		ARGUMENTS:
//
//			hAnalyst	- a handle to the PA Object
//			sCommandID	- ID of the command behind button
//			
//     	RETURNED VALUE: 
//
//			STRING - Command ID behind the new button
//
//		PSEUDO CODE:
//
//		Get Main Toolbar Buttons collection
//		Call "Add" on the Buttons collection to add a button
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
STRING
FUNCTION
CSV_PA_AddCommandToMainToolbar(OBJECT hAnalyst, STRING sCommandID)
	
	ErrSet(1);
	IsError();
	
	OBJECT hToolbars 		= _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hMainToolbar 	= _ObjectCallMethod(hToolbars, "get_Item", 1);
	OBJECT hButtons		 	= _ObjectGetProperty(hMainToolbar , "Buttons");

	_ObjectCallMethod(hButtons, "Add", sCommandID);
	IF IsError() = 0 THEN
		ErrSet(0);
		RETURN sCommandID;
	END

	IsError();
	ErrSet(0);
	RETURN "";
	
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_LoadPavFile()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Load a PAV file into the Process Analyst
//				
// 		ARGUMENTS:
//
//			hAnalyst - a reference to the PA object
//			sPavName - Name of the PAV file to load
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION 
CSV_PA_LoadPavFile(OBJECT hAnalyst, STRING sPavName)
	
	ErrSet(1);
	mbPavLoading = 1;
	_ObjectCallMethod(hAnalyst, "LoadFromFile", sPavName , 0);
	mbPavLoading = 0;
	
	IsError();
	ErrSet(0);

END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_RemoveMainToolbarButtons()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Remove all buttons from the main toolbar and any custom commands
//				
// 		ARGUMENTS:
//
//			hAnalyst - a reference to the PA object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION 
CSV_PA_RemoveMainToolbarButtons(OBJECT hAnalyst)

	ErrSet(1);
	IsError();

	OBJECT hCommandSystem 		= _ObjectGetProperty(hAnalyst, "CommandSystem");
	OBJECT hToolbars 		= _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hMainToolbar 	= _ObjectCallMethod(hToolbars, "get_Item", 1);
	OBJECT hButtons		 	= _ObjectGetProperty(hMainToolbar , "Buttons");
	
	_ObjectCallMethod(hButtons, "RemoveAll");
	_ObjectCallMethod(hCommandSystem , "Remove", msLoadTrendGroupID);
	_ObjectCallMethod(hCommandSystem , "Remove", msPlayDemoID);
	_ObjectCallMethod(hCommandSystem , "Remove", msStopDemoID);
	_ObjectCallMethod(hCommandSystem , "Remove", msDiffCursorsID);

	IsError();
	ErrSet(0);
END	


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_RemoveContextMenu()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Disable the context menu on the PA
//				
// 		ARGUMENTS:
//
//			hAnalyst - a reference to the PA object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION CSV_PA_RemoveContextMenu(OBJECT hAnalyst)

	ErrSet(1);
	IsError();

	_ObjectSetProperty(hAnalyst, "ContextMenu", 0);
	
	IsError();
	ErrSet(0);
END	




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_UpdateCustomButtons()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Updates the enabled state of Example Project custom buttons
//				
// 		ARGUMENTS:
//
//			hAnalyst - a reference to the PA object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_UpdateCustomButtons(OBJECT hAnalyst)
	ErrSet(1);
	IsError();
	
	OBJECT	hCommandSystem 	= _ObjectGetProperty(hAnalyst, "CommandSystem");
	
	IF IsError() = 0 THEN
		IF mbDemoRunning THEN
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msDiffCursorsID, 0);
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msLoadTrendGroupID, 0);
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msPlayDemoID , 0);
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msStopDemoID , 1);
		ELSE
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msDiffCursorsID, 1);
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msLoadTrendGroupID, 1);
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msPlayDemoID , 1);
			CSV_PA_UpdateCustomCommandStatus(hCommandSystem, msStopDemoID , 0);
		END
	END
	
	IsError();
	ErrSet(0);
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_UpdateCustomCommandStatus()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Set the enable/disabled state of an custom command
//				
// 		ARGUMENTS:
//
//			hCommandSystem 	- a reference to the PA Command System object
//			nCommandID		- the ID of the command to update
//			bEnabled		- the new state of the command
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_UpdateCustomCommandStatus(OBJECT hCommandSystem, STRING sCommandID, INT bEnabled)

	ErrSet(1);
	IsError();
	
	OBJECT	hCommand;
	hCommand	= _ObjectCallMethod(hCommandSystem, "get_ItemById", sCommandID);

	IF IsError() = 0 THEN
		_ObjectSetProperty(hCommand, "Enabled", bEnabled);
	END

	IsError();
	ErrSet(0);
END
	



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_CustomCommandExists()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Check if a custom commandexists based on the tooltip
//				
// 		ARGUMENTS:
//
//			hAnalyst		- a reference to the PA object
//			sButtonTooltip	- the tooltip text for the button
//			
//     	RETURNED VALUE: 
//
//			Command ID if the command exists else ""
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
STRING
FUNCTION
CSV_PA_CustomCommandExists(OBJECT hAnalyst, STRING sCommandTooltip)

	ErrSet(1);
	IsError();

	OBJECT	hCommandSystem 	= _ObjectGetProperty(hAnalyst, "CommandSystem");
	INT		nCommandCount	= _ObjectGetProperty(hCommandSystem , "Count");
	INT 	nCommandIter	= 0;
	OBJECT	hCommand;
	STRING	sCurrentTooltip;
	STRING	sCurrentId;
	
	IF IsError() = 0 THEN
		FOR nCommandIter = 1 TO nCommandCount DO
			hCommand = _ObjectCallMethod(hCommandSystem , "get_Item", nCommandIter);
			IF IsError() = 0 THEN
				sCurrentTooltip = _ObjectGetProperty(hCommand, "Tooltip");
				sCurrentId = _ObjectGetProperty(hCommand, "CommandId");
				IF (IsError() = 0) AND (sCurrentTooltip = sCommandTooltip) THEN
					ErrSet(0);
					RETURN sCurrentId;
				END
			END
		END
	END

	IsError();
	ErrSet(0);
	
	RETURN "";
END

	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_ConfigureCustomButtons()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Add a seperator and Example custom buttons to the main toolbar
//				
// 		ARGUMENTS:
//
//			hAnalyst- a reference to the PA object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_ConfigureCustomButtons(OBJECT hAnalyst)

	msDiffCursorsID = CSV_PA_CustomCommandExists(hAnalyst, StrToLocalText("@(Difference Cursor)"));
	IF msDiffCursorsID = "" THEN
		CSV_PA_AddCommandToMainToolbar(hAnalyst, "Citect_Command_Separator");
		msDiffCursorsID = CSV_PA_CreateMainToolbarButton(hAnalyst, "CSV_DifferenceCursor", StrToLocalText("@(Difference Cursor)"), "DifferenceCursors.ico", 1);
	END

	msLoadTrendGroupID = CSV_PA_CustomCommandExists(hAnalyst, StrToLocalText("@(Load Trend Group)"));
	IF msLoadTrendGroupID = "" THEN
		msLoadTrendGroupID 	= CSV_PA_CreateMainToolbarButton(hAnalyst, "CSV_LoadGroup", StrToLocalText("@(Load Trend Group)"), "LoadTrendGroup.ico", 0);
	END

	msPlayDemoID = CSV_PA_CustomCommandExists(hAnalyst, StrToLocalText("@(Play Demo)"));
	IF msPlayDemoID = "" THEN
		msPlayDemoID = CSV_PA_CreateMainToolbarButton(hAnalyst, "CSV_PlayDemo", StrToLocalText("@(Play Demo)"), "PlayDemo.ico", 0);
	END

	msStopDemoID = CSV_PA_CustomCommandExists(hAnalyst, StrToLocalText("@(Stop Demo)"));
	IF msStopDemoID = "" THEN
		msStopDemoID = CSV_PA_CreateMainToolbarButton(hAnalyst, "CSV_StopDemo", StrToLocalText("@(Stop Demo)"), "StopDemo.ico", 0);
	END
END

	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_LoadContextPav()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Load PAV corresponding to previous page
//				
// 		ARGUMENTS:
//
//			hAnalyst- a reference to the PA object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		Find last page name
//		Add ".pav" to the end of this name
//		Open the corresponding PAV file if it exists
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_LoadContextPav(OBJECT hAnalyst)

	STRING sLastPage;
	STRING sViewFile;
	
	sLastPage = PagePeekLast(0);
	
	IF  sLastPage <> "" THEN
			sViewFile = sLastPage + ".pav";
		
		ErrSet(1);
		
		_ObjectCallMethod(hAnalyst, "LoadFromFile", sViewFile, 0);
		
		
		IsError();
		ErrSet(0);
	END
END
	
		
//	FUNCTION UAG_PA_LoadTrendGroup()
//	Übergabeparameter:	PA als Objekt      
//                       
//	Rückgabewert:		---
//	Beschreibung:		läde eine Trendgruppe in den PA
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	01.12.09	/	Schneider Electrik GmbH
//	Version				3.2.0.0
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	
FUNCTION
UAG_PA_LoadTrendGroup(OBJECT hAnalyst)

	ErrSet(1);
	IsError();
	
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	_ObjectSetProperty(hAnalyst, "PrimaryPath", PathToStr("[DATA2P]:\Analyst Views"));
	_ObjectSetProperty(hAnalyst, "SecondaryPath", PathToStr("[DATA2S]:\Analyst Views"));
	STRING sPane	= "";
	STRING sGroup	= "";
	OBJECT hPane;
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	INT iError =_ObjectGetProperty(hObjectView, "Height");
	_ObjectSetProperty(hObjectView, "Height", 200);
	OBJECT hColumns = _ObjectGetProperty(hObjectView, "Columns");
	OBJECT hObjectViewColumn = _ObjectCallMethod(hColumns, "get_Item", 1);
	STRING sName = _ObjectGetProperty(hObjectViewColumn, "Name");
	_ObjectSetProperty(hObjectViewColumn, "Width", 270);
	sGroup = UAG_Trend_GetGroupPenList();
	IF gsTrendSelectedDesc <> "" THEN
		hPane = _ObjectCallMethod(hPanes , "get_ItemByName", gsTrendSelectedDesc);
		IF IsError() <> 0 THEN
			hPane = _ObjectCallMethod(hPanes , "Create", gsTrendSelectedDesc);
		END
		UAG_PA_AddTrendGroup(hAnalyst, hPane, sGroup);
	ELSE
		UAG_SystemInfo("UAG_PA_LoadTrendGroup", "System", "@(No pane selected.)" ,"-","-","_",TaskCluster(),_UAG_Fehler);
	END

	IsError();
	ErrSet(0);
END

//	FUNCTION UAG_PA_DelTrendGroup()
//	Übergabeparameter:	PA als Objekt      
//                       
//	Rückgabewert:		---
//	Beschreibung:		löscht alle Gruppen
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	02.12.09	/	Schneider Electrik GmbH
//	Version				3.1.1.7
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	
FUNCTION
UAG_PA_DelTrendGroup(OBJECT hAnalyst)

	ErrSet(1);
	IsError();
	
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	STRING sPane	= "";
	STRING sGroup	= "";
	OBJECT hPane;
	
	_ObjectCallMethod(hPanes, "RemoveAll");
	IsError();
	ErrSet(0);
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	FUNCTION UAG_PA_AddTrendGroup()
//	Übergabeparameter:	      
//			hAnalyst	- Process Analyst Handle
//			hPane		- Pane to add the group to
//			sTrendGroup	- Name of the group to add
//                       
//	Rückgabewert:		---
//	Beschreibung:		
//		Get reference to the Pens collection of the Pane
//		Get the list of TAGs in the Trend Group
//		FOR each trend group tag
//			Get next tag from comma seperated list
//			IF Tag is valid
//				Create Analog Pen
//				Set Pen name as Tag Name
//				Set Datapoint as Tag Name
//			END
//		END
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	02.12.09	/	Schneider Electrik GmbH
//	Version				7.2.0.0
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	


FUNCTION
UAG_PA_AddTrendGroup(OBJECT hAnalyst, OBJECT hPane, STRING sTrendGroup)

	ErrSet(1);
	IsError();
	
	STRING	sPen;
	OBJECT	hNewPen;
	INT		iCommaPos	= 0;
	INT		iOffset		= 0;
	INT		iLength		= 0;
	INT		i			= 0;
	INT		farbe;
	_ObjectCallMethod(hAnalyst, "BlockUpdates");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	
	_ObjectCallMethod(hPens, "RemoveAll");

	WHILE iCommaPos > -1 DO
		iCommaPos = StrSearch(iOffset, sTrendGroup, ",");
		
		IF iCommaPos > -1 THEN
			iLength = iCommaPos - iOffset;
			
		ELSE
			iLength = StrLength(sTrendGroup) - iOffset;			
		END
		
		IF iLength > 0 THEN
			sPen = StrMid(sTrendGroup, iOffset, iLength);
		ELSE
			sPen = "";
		END
		
		iOffset = iCommaPos + 1;
		farbe=	miFarbe[i][1];
		IF sPen <> "" THEN
			hNewPen = _ObjectCallMethod(hPens , "Create", 0x1001, 0x2);
			_ObjectSetProperty(hNewPen, "Datapoint", sPen);
			_ObjectSetProperty(hNewPen, "LineColor", farbe);
			_ObjectSetProperty(hNewPen, "LineWidth", 2);
			_ObjectCallMethod(hNewPen, "SetDefaultSpan", 0, giAlarmSpanDay, giAlarmSpanHour, giAlarmSpanMin, 0, 0);
			_ObjectCallMethod(hNewPen, "ResetToDefaultSpan");
			i=i+1
		END		
	END

	_ObjectCallMethod(hAnalyst, "UnblockUpdates");
	IsError();
	ErrSet(0);
END	



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//		FUNCTION NAME	
//						CSV_PA_ConfigurePageStyle()
//
//		REV	DATE		WHO			DESCRIPTION
//		0	
//
//     	GENERAL DESCRIPTION
//
//			Add a seperator and Example custom buttons to the main toolbar
//				
// 		ARGUMENTS:
//
//			hAnalyst- a reference to the PA object
//			
//     	RETURNED VALUE: 
//
//			None
//
//		PSEUDO CODE:
//
//		NOTE: This is not used as part of the Example project functionality, however it is an example
//		of how the general appearance of the Process Analyst may be changed
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION
CSV_PA_ConfigurePageStyle(OBJECT hAnalyst)

	ErrSet(1);
	IsError();
	
	OBJECT 	hObjectView;
	OBJECT 	hPanes;
	OBJECT 	hPane;
	INT		nPaneCount;	
	INT		nPaneIter;

	// Background color of the chart
	_ObjectSetProperty(hAnalyst, "BackgroundColor", PackedRGB(0, 43, 85));
	
	// Background color of the Object View
	hObjectView = _ObjectGetProperty(hAnalyst, "ObjectView");
	_ObjectSetProperty(hObjectView , "BackgroundColor", PackedRGB(128,191,255));
	
	// Background color of the panes
	hPanes		= _ObjectGetProperty(hAnalyst, "Panes");
	nPaneCount	= _ObjectGetProperty(hPanes, "Count");
	
	FOR nPaneIter=1 TO nPaneCount DO
		hPane = _ObjectCallMethod(hPanes, "get_Item", nPaneIter);
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(0, 43, 85));
	END
	IsError();
	ErrSet(0);
END

//	UAG_PA_PageGruppe()
//	Übergabeparameter:	 ---     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Öffnet das Trendfenster	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	01.12.09	/	Schneider Electrik GmbH
//	Version				75.33.11.02
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	07.09.16	Steiner		Abfrage ob gelöscht werden soll eingefügt.
//	

FUNCTION
UAG_PA_PageGruppe(STRING sPage,STRING sMenu, STRING sPens,INT iMon=WinNumber(),STRING idel=0)
	PageTask(iMon,"UAG_PA_PageGruppe72","^""+sPage+"^",^""+sMenu+"^",^""+sPens+"^",^"" +idel+ "^"");
END
FUNCTION
UAG_PA_PageGruppe72(STRING sPage,STRING sMenu, STRING sPens,STRING idel="0")
	PageDisplay(sPage);
//	_msTrendSelectedPens_ArraySet(iMonitor,0, sPens);
//	msTrendSelectedDesc[iMonitor][0] =sMenu;
	SleepMS(200);
	ErrSet(1);
	IsError();
	OBJECT hAnalyst=ObjectByName("CSV_PA");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	INT iError =_ObjectGetProperty(hObjectView, "Height");
	_ObjectSetProperty(hObjectView, "Height", 200);
	OBJECT hColumns = _ObjectGetProperty(hObjectView, "Columns");
	OBJECT hObjectViewColumn = _ObjectCallMethod(hColumns, "get_Item", 1);
	STRING sName = _ObjectGetProperty(hObjectViewColumn, "Name");
	_ObjectSetProperty(hObjectViewColumn, "Width", 270);


	STRING sPane	= "";
	STRING sGroup	= "";
	OBJECT hPane;
	IF iDel = "0" THEN
		UAG_PA_DelTrendGroup(hAnalyst);
	END	
	_ObjectSetProperty(hAnalyst, "PrimaryPath", PathToStr("[DATA2P]:\Analyst Views"));
	_ObjectSetProperty(hAnalyst, "SecondaryPath", PathToStr("[DATA2S]:\Analyst Views"));
	sPane = sMenu;
	
	IF sPane <> "" THEN
		hPane = _ObjectCallMethod(hPanes , "get_ItemByName", sPane);
		IF IsError() <> 0 THEN
			hPane = _ObjectCallMethod(hPanes , "Create", sPane);
		END
		
		IF IsError() = 0 THEN
			sGroup = sPens;
			UAG_PA_AddTrendGroup(hAnalyst, hPane, sGroup);
		ELSE
			UAG_SystemInfo("UAG_PA_LoadTrendGroup", "System", "@(Cannot find pane.)" ,"-","-","_",TaskCluster(),_UAG_Fehler);
		END
	ELSE
			UAG_SystemInfo("UAG_PA_LoadTrendGroup", "System", "@(No pane selected)" ,"-","-","_",TaskCluster(),_UAG_Fehler);
	END

	IsError();
	ErrSet(0);

//	UAG_PA_SetPens(oPA,iMonitor);
END

//	FUNCTION UAG_PA_Anzeige()
//	Übergabeparameter:	Name der PAV Datei und Nummer des Genie als String
//                                             
//	Rückgabewert:		---
//	Beschreibung:		
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	04.02.2009	/	Schneider Electrik GmbH
//	Version				3.1.1.0
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	


FUNCTION
UAG_PA_Anzeige(STRING sDatei, STRING sNR)

	OBJECT hAnalyst	= ObjectByName("UAG_PA"+sNR);
	_ObjectCallMethod(hAnalyst, "LoadFromFile",sDatei, 0);
END

//	FUNCTION UAG_PA_Anzeige_Stift()
//	Übergabeparameter:	Name des Trends und Nummer des Genie als String
//                                             
//	Rückgabewert:		---
//	Beschreibung:		
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	04.12.2009	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	21.12.12	Steiner		Standard Spanne eingeführt
//	22.05.17	Steiner		Autoscale

FUNCTION
UAG_PA_Anzeige_Stift(STRING sPen, STRING sNR, INT iFarb_Nr=0,INT IScale=0)
	
	INT farbe;
	OBJECT hAnalyst	= ObjectByName("UAG_PA"+sNR);
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	_ObjectSetProperty(hObjectView, "Visible", 0);
	OBJECT hToolbars = _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 1);
	_ObjectSetProperty(hToolbar, "Visible", 0);
	OBJECT hPane;
	OBJECT hNewPen;
	ErrSet(1);
	IsError();
	farbe=	miFarbe[iFarb_Nr][1];
	hPane = _ObjectCallMethod(hPanes , "get_ItemByName", "Analog");
	IF IsError() <> 0 THEN
		hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	END
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	_ObjectCallMethod(hPens, "RemoveAll");
//	ProcessAnalystSetPen(-1,sPen,"UAG_PA"+sNR);
	hNewPen = _ObjectCallMethod(hPens , "Create", 0x1001, 0x2);
	_ObjectSetProperty(hNewPen, "Datapoint", sPen);
	_ObjectSetProperty(hNewPen, "LineColor", farbe);
	_ObjectSetProperty(hNewPen, "LineWidth", 2);
	_ObjectCallMethod(hNewPen, "SetDefaultSpan", 0, giAlarmSpanDay, giAlarmSpanHour, giAlarmSpanMin, 0, 0);
	_ObjectCallMethod(hNewPen, "ResetToDefaultSpan");
	_ObjectCallMethod(hNewPen, "VerticalAxisAutoscale",iScale);
	ErrSet(0);
END


//	FUNCTION UAG_PA_Anzeige_Stifte()
//	Übergabeparameter:	Name des Trends und Nummer des Genie als String
//                                             
//	Rückgabewert:		---
//	Beschreibung:		Wird für Popup Fenster genutzt (ab dem 2. Stift)
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	04.12.2009	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	21.12.12	Steiner		Standard Spanne eingeführt
//	22.05.17	Steiner		Autoscale

//	

FUNCTION
UAG_PA_Anzeige_Stifte(STRING sPen, STRING sNR=1, INT iFarb_Nr=0,INT iRemoveall=0,INT iScale=0)
	
	INT farbe;
	INT iError;

	ErrSet(1);
	IsError();
	OBJECT hAnalyst	= ObjectByName("UAG_PA"+sNR);
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	_ObjectSetProperty(hObjectView, "Visible", 0);
	iError =_ObjectGetProperty(hObjectView, "Height");
	_ObjectSetProperty(hObjectView, "Height", 92);
	OBJECT hColumns = _ObjectGetProperty(hObjectView, "Columns");
	OBJECT hObjectViewColumn = _ObjectCallMethod(hColumns, "get_Item", 1);
	STRING sName = _ObjectGetProperty(hObjectViewColumn, "Name");
	_ObjectSetProperty(hObjectViewColumn, "Width", 270);
	OBJECT hToolbars = _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 1);
	_ObjectSetProperty(hToolbar, "Visible", 1);
	OBJECT hPane;
	OBJECT hNewPen;
	IsError();
	farbe=	miFarbe[iFarb_Nr][1];
	hPane = _ObjectCallMethod(hPanes , "get_ItemByName", "Analog");
	iError = IsError();
	IF iError <> 0 THEN
		hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	END
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	IF iRemoveall=1 THEN
		_ObjectCallMethod(hPens, "RemoveAll");
	END	

	hNewPen = _ObjectCallMethod(hPens , "Create", 0x1001, 0x2);
	_ObjectSetProperty(hNewPen, "Datapoint", sPen);
	_ObjectSetProperty(hNewPen, "Name", sPen);
	_ObjectSetProperty(hNewPen, "LineColor", farbe);
	_ObjectSetProperty(hNewPen, "LineWidth", 2);
	_ObjectCallMethod(hNewPen, "SetDefaultSpan", 0, giAlarmSpanDay, giAlarmSpanHour, giAlarmSpanMin, 0, 0);
	_ObjectCallMethod(hNewPen, "ResetToDefaultSpan");
	_ObjectCallMethod(hNewPen, "VerticalAxisAutoscale",iScale);
	
	ErrSet(0);
END

//	FUNCTION UAG_PA_Anzeige_Stifte_M()
//	Übergabeparameter:	Name des Trends und Nummer des Genie als String
//                                             
//	Rückgabewert:		---
//	Beschreibung:		Wird für Anzeige Meldewort genutzt
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	04.12.2009	/	Schneider Electrik GmbH
//	Version				74.33.81.03
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	21.12.12	Steiner		Standard Spanne eingeführt
//	

FUNCTION
UAG_PA_Anzeige_Stifte_M(STRING sPen, STRING sNR=1, INT iFarb_Nr=1,INT iRemoveall=0)
	
	INT farbe;
	INT iError;

	ErrSet(1);
	IsError();
	OBJECT hAnalyst	= ObjectByName("UAG_PA"+sNR);
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	_ObjectSetProperty(hObjectView, "Visible", 0);
	iError =_ObjectGetProperty(hObjectView, "Height");
//	_ObjectSetProperty(hObjectView, "Height", 120);
	OBJECT hColumns = _ObjectGetProperty(hObjectView, "Columns");
	OBJECT hObjectViewColumn = _ObjectCallMethod(hColumns, "get_Item", 1);
	STRING sName = _ObjectGetProperty(hObjectViewColumn, "Name");
	_ObjectSetProperty(hObjectViewColumn, "Width", 270);
	OBJECT hToolbars = _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 1);
	_ObjectSetProperty(hToolbar, "Visible", 1);
	OBJECT hPane;
	OBJECT hNewPen;
	IsError();
	farbe=	miFarbe[iFarb_Nr][1];
	hPane = _ObjectCallMethod(hPanes , "get_ItemByName", "Analog");
	iError = IsError();
	IF iError <> 0 THEN
		hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	END
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	IF iRemoveall=1 THEN
		_ObjectCallMethod(hPens, "RemoveAll");
	END	

	hNewPen = _ObjectCallMethod(hPens , "Create", 0x1001, 0x2);
	_ObjectSetProperty(hNewPen, "Datapoint", sPen);
	_ObjectSetProperty(hNewPen, "Name", sPen);
	_ObjectSetProperty(hNewPen, "LineColor", farbe);
	_ObjectSetProperty(hNewPen, "LineWidth", 2);
	_ObjectCallMethod(hNewPen, "SetDefaultSpan", 0, giAlarmSpanDay, giAlarmSpanHour, giAlarmSpanMin, 0, 0);
	_ObjectCallMethod(hNewPen, "ResetToDefaultSpan");
	_ObjectSetProperty(hNewPen, "RequestMode", 3);
	_ObjectSetProperty(hNewPen, "LineInterpolation", 1);
	_ObjectSetProperty(hNewPen, "VerticalAxisAutoscale", -1);
	OBJECT hCursors = _ObjectGetProperty(hAnalyst, "Cursors");
	OBJECT hCursor = _ObjectCallMethod(hCursors, "get_Item", 1);
	_ObjectSetProperty(hCursor, "Position", 600);

	ErrSet(0);
END


//	FUNCTION UAG_PA_Anzeige_Stifte_ins()
//	Übergabeparameter:	Name des Tags und Nummer des Genie als String
//                                             
//	Rückgabewert:		---
//	Beschreibung:		Wird für Popup Fenster zum Anzeigen von Instandtrends genutzt
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	06.08.2013	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	22.05.17	Steiner		Autoscale

//	
//	

FUNCTION
UAG_PA_Anzeige_Stifte_ins(STRING sPen, STRING sNR=1, INT iFarb_Nr=1,INT iRemoveall=0,INT IScale=0)
	
	INT farbe;
	INT iError;

	ErrSet(1);
	IsError();
	OBJECT hAnalyst	= ObjectByName("UAG_PA"+sNR);
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	_ObjectSetProperty(hObjectView, "Visible", 0);
	iError =_ObjectGetProperty(hObjectView, "Height");
//	_ObjectSetProperty(hObjectView, "Height", 92);
	OBJECT hColumns = _ObjectGetProperty(hObjectView, "Columns");
	OBJECT hObjectViewColumn = _ObjectCallMethod(hColumns, "get_Item", 1);
	STRING sName = _ObjectGetProperty(hObjectViewColumn, "Name");
	_ObjectSetProperty(hObjectViewColumn, "Width", 270);
	OBJECT hToolbars = _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 1);
	_ObjectSetProperty(hToolbar, "Visible", 1);
	OBJECT hPane;
	OBJECT hNewPen;
	IsError();
	farbe=	miFarbe[iFarb_Nr][1];
	hPane = _ObjectCallMethod(hPanes , "get_ItemByName", "Analog");
	iError = IsError();
	IF iError <> 0 THEN
		hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	END
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");

	IF iRemoveall=1 THEN
		_ObjectCallMethod(hPens, "RemoveAll");
	END	

	hNewPen = _ObjectCallMethod(hPens , "Create", 0x1001, 0x2);
	_ObjectSetProperty(hNewPen, "Datapoint", sPen);
	_ObjectSetProperty(hNewPen, "Name", sPen);
	_ObjectSetProperty(hNewPen, "InstantTrend", -1);
	_ObjectSetProperty(hNewPen, "LineColor", farbe);
	_ObjectSetProperty(hNewPen, "LineWidth", 2);
	_ObjectCallMethod(hNewPen, "SetDefaultSpan", 0, giAlarmSpanDay, giAlarmSpanHour, giAlarmSpanMin, 0, 0);
	_ObjectCallMethod(hNewPen, "ResetToDefaultSpan");
	_ObjectCallMethod(hNewPen, "VerticalAxisAutoscale",iScale);
	ErrSet(0);
END


//	FUNCTION UAG_PA_Anzeige_Stift_A()
//	Übergabeparameter:	Name des Alarms und Nummer des Genie als String
//                                             
//	Rückgabewert:		---
//	Beschreibung:		Anzeige von Alarmen im Analyst mit löschen der Pane
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	04.12.2009	/	Schneider Electrik GmbH
//	Version				7.2.3.13
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	21.12.12	Steiner		Standard Spanne eingeführt
//	

FUNCTION
UAG_PA_Anzeige_Stift_A(STRING sPen, STRING sNR, INT iFarb_Nr=1)
	
	INT farbe;
	INT iError;
	OBJECT hAnalyst	= ObjectByName("UAG_PA"+sNR);
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	_ObjectSetProperty(hObjectView, "Visible", 0);
	OBJECT hToolbars = _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 1);
	_ObjectSetProperty(hToolbar, "Visible", 0);
//	hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 2);
//	_ObjectSetProperty(hToolbar, "Visible", 0);
	OBJECT hPane;
	OBJECT hNewPen;
	ErrSet(1);
	IsError();
	farbe=	miFarbe[iFarb_Nr][1];
	hPane = _ObjectCallMethod(hPanes , "get_ItemByName", "Alarm");
	iError = IsError();
	IF iError <> 0 THEN
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
	END
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	_ObjectCallMethod(hPens, "RemoveAll");

	hNewPen = _ObjectCallMethod(hPens , "Create", 0x1003, 0x2);
	_ObjectSetProperty(hNewPen, "Datapoint", sPen);
	_ObjectSetProperty(hNewPen, "LineColor", farbe);
	_ObjectCallMethod(hNewPen, "SetFillColor" ,0, farbe);
	_ObjectSetProperty(hNewPen, "LineWidth", 2);
	_ObjectCallMethod(hNewPen, "SetDefaultSpan", 0, giAlarmSpanDay, giAlarmSpanHour, giAlarmSpanMin, 0, 0);
	_ObjectCallMethod(hNewPen, "ResetToDefaultSpan");
	ErrSet(0);
END

//	FUNCTION UAG_PA_Anzeige_Stift_A()
//	Übergabeparameter:	Name des Alarms und Nummer des Genie als String
//                                             
//	Rückgabewert:		---
//	Beschreibung:		Anzeige von Alarmen im Analyst
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	04.12.2009	/	Schneider Electrik GmbH
//	Version				7.2.3.13
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	21.12.12	Steiner		Standard Spanne eingeführt
//	

FUNCTION
UAG_PA_Anzeige_Stifte_A(STRING sPen, STRING sNR, INT iFarb_Nr=1)
	
	INT farbe;
	INT iError;

	ErrSet(1);
	IsError();
	OBJECT hAnalyst	= ObjectByName("UAG_PA"+sNR);
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hObjectView = _ObjectGetProperty(hAnalyst, "objectView");
	_ObjectSetProperty(hObjectView, "Visible", 0);
	iError =_ObjectGetProperty(hObjectView, "Height");
	_ObjectSetProperty(hObjectView, "Height", 92);
	OBJECT hColumns = _ObjectGetProperty(hObjectView, "Columns");
	OBJECT hObjectViewColumn = _ObjectCallMethod(hColumns, "get_Item", 1);
	STRING sName = _ObjectGetProperty(hObjectViewColumn, "Name");
	_ObjectSetProperty(hObjectViewColumn, "Width", 270);
	OBJECT hToolbars = _ObjectGetProperty(hAnalyst, "Toolbars");
	OBJECT hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 1);
	_ObjectSetProperty(hToolbar, "Visible", 1);
//	hToolbar =  _ObjectCallMethod(hToolbars, "get_Item", 2);
//	_ObjectSetProperty(hToolbar, "Visible", 0);
	OBJECT hPane;
	OBJECT hNewPen;
	IsError();
	farbe=	miFarbe[iFarb_Nr][1];
	hPane = _ObjectCallMethod(hPanes , "get_ItemByName", "Alarm");
	iError = IsError();
	IF iError <> 0 THEN
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
	END
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
//	_ObjectCallMethod(hPens, "RemoveAll");
//
	hNewPen = _ObjectCallMethod(hPens , "Create", 0x1003, 0x2);
	_ObjectSetProperty(hNewPen, "Datapoint", sPen);
	_ObjectSetProperty(hNewPen, "Name", sPen);
	_ObjectSetProperty(hNewPen, "LineColor", farbe);
	_ObjectSetProperty(hNewPen, "LineWidth", 2);
	_ObjectCallMethod(hNewPen, "SetDefaultSpan", 0, giAlarmSpanDay, giAlarmSpanHour, giAlarmSpanMin, 0, 0);
	_ObjectCallMethod(hNewPen, "ResetToDefaultSpan");

	ErrSet(0);
END

//	UAG_PA_Code()
//	Übergabeparameter:	 ---     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Hintergrundfunktion Anzeige Aktueller Wert	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	23.01.13	/	Schneider Electrik GmbH
//	Version				7.2.3.14
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	

FUNCTION
UAG_PA_Code(INT iFp=0)
	STRING PageName=PageInfo(0)
	WHILE PageInfo(0)=PageName DO
		
		UAG_PA_UpdateTagValue( iFp);
		SleepMS(1000)
	END
END

//	UAG_PA_UpdateTagValue()
//	Übergabeparameter:	 ---     
//                       
//	Rückgabewert:		 
//	Beschreibung:		THIS FUNCTION WILL READ THROUGH ALL PANES AND PENS AND 
//						DISPLAY THE TREND TAG VALUE AT THE SPECIFIED INTERVAL	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	23.01.13	/	Schneider Electrik GmbH
//	Version				7.2.3.14
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	

//
FUNCTION
UAG_PA_UpdateTagValue(INT iFp)
	OBJECT 	hAnalyst,hObjectView,hObjectViewPaneItems,hObjectViewPenItems;
	OBJECT	hObjectViewItem,hObjectViewColumns,hPanes,hPane;
	INT 	nPaneCount,nPaneIter;
	OBJECT 	hPens,hPen;
	INT 	nPenCount,nPenIter,iWidth,iPlaces;
	STRING 	sTrendTagName,sTagType;
	REAL	itemp;
	
	IF iFp=0 THEN
		hAnalyst =ObjectByName("CSV_PA");
	ELSE
		hAnalyst =ObjectByName("UAG_PA1");
	END	
// Retrieve the Object View
	hObjectView =_ObjectGetProperty(hAnalyst, "ObjectView");
	hObjectViewPaneItems =_ObjectGetProperty(hObjectView , "Items");
// Retrieve the panes
	hPanes =_ObjectGetProperty(hAnalyst, "Panes");
	nPaneCount =_ObjectGetProperty(hPanes, "Count");
//Get Columns
	hObjectViewColumns =_ObjectGetProperty(hObjectView , "Columns");
	FOR nPaneIter = 1 TO nPaneCount DO
		// Get object view Item and sub Items collection corresponing to this Pane
		hObjectViewItem =_ObjectCallMethod(hObjectViewPaneItems, "get_Item",nPaneIter);
		hObjectViewPenItems =_ObjectGetProperty(hObjectViewItem, "Items");
		// Get the Pens collection (and count) corresponding to this pane
		hPane =_ObjectCallMethod(hPanes, "get_Item",nPaneIter);
		hPens =_ObjectGetProperty(hPane , "Pens");
		nPenCount =_ObjectGetProperty(hPens , "Count");
		FOR nPenIter = 1 TO nPenCount DO
			// Get the matching Pen Item and ListView sub-item pair
			hPen =_ObjectCallMethod(hPens, "get_Item",nPenIter );
			hObjectViewItem =_ObjectCallMethod(hObjectViewPenItems, "get_Item",nPenIter );
			//Get the Trend Tag Name
			sTrendTagName =_ObjectCallMethod(hPen, "GetInformation", "Tag"); 
			ErrSet(1);
			TrnGetTable(sTrendTagName, 0, 0, 1,mrTrendTagData,1);
			iWidth =TagInfoEx(sTrendTagName, 6 );
			iPlaces=TagInfoEx(sTrendTagName, 7 )
			itemp=RealToStr(mrTrendTagData[0], iWidth, iPlaces)
			
			IF IsError() = 0 THEN //IF THE PEN IS NOT AN ALARM PEN, DISPLAY VALUE IN LIST
				//Update our Column with this value
				_ObjectCallMethod(hObjectViewItem,"PutField","Tag_Value",itemp);
			END
			ErrSet(0);

		END
	END
END

//	UAG_PA_ANA()
//	Übergabeparameter:	 Tag     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Anzeige von x,GW und Alarmen	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	23.01.13	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	22.05.17	Steiner		Autoscale

//	

FUNCTION UAG_PA_ANA(STRING sTag)
	STRING sTemp;
	OBJECT hAnalyst	= ObjectByName("UAG_PA1");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	ErrSet(1);
	UAG_PA_Anzeige_Stift(sTag +"_X",1,_UAG_PF_schwarz,-1)

	IF TagInfoEx(sTag +"_AHH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AHH",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_AH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AH",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_AL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AL",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_ALL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_ALL",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_SHH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SHH",1,_UAG_PF_weiss) END;
	IF TagInfoEx(sTag +"_SH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SH",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SL",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SLL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SLL",1,_UAG_PF_weiss) END;

	IF TagInfoEx(sTag +"_M_b16.Name",0) <> "" THEN 
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b16",1,_UAG_PF_rot)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
 
	END;		!A++
	IF TagInfoEx(sTag +"_M_b17.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b17",1,_UAG_PF_orange) END;		!A+
	IF TagInfoEx(sTag +"_M_b18.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b18",1,_UAG_PF_orange) END;		!A-
	IF TagInfoEx(sTag +"_M_b19.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b19",1,_UAG_PF_rot) END;		!A--
	IF TagInfoEx(sTag +"_M_b11.Name",0) <> "" THEN
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b11",1,_UAG_PF_weiss)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));

	END;	!S++
	IF TagInfoEx(sTag +"_M_b12.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b12",1,_UAG_PF_gelb) END;		!S+
	IF TagInfoEx(sTag +"_M_b13.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b13",1,_UAG_PF_gelb) END;		!S-
	IF TagInfoEx(sTag +"_M_b14.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b14",1,_UAG_PF_weiss) END;	!S--
	
	hPane = _ObjectCallMethod(hPanes, "get_ItemByName", "Analog");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	sTemp = sTag + "_X"
	OBJECT hPen = _ObjectCallMethod(hPens, "get_ItemByName",sTemp );
	_ObjectSetProperty(hPen, "VerticalAxisAutoscale", -1);
	_ObjectCallMethod(hPen, "Select");
	ErrSet(0);
END

//	GUT_PA_ANA3c()
//	Übergabeparameter:	 Tag     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Anzeige von x,GW und Alarmen	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	24.04.18	/	Schneider Electrik GmbH
//	Version				75.33.11.09
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	
//	

FUNCTION GUT_PA_ANA3c(STRING sTag)
	STRING sTemp;
	OBJECT hAnalyst	= ObjectByName("UAG_PA1");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	ErrSet(1);
	UAG_PA_Anzeige_Stift(sTag +"_X",1,_UAG_PF_schwarz,-1)

	IF TagInfoEx(sTag +"_O3",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_O3",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_O2",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_O2",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_O1",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_O1",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_U1",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_U1",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_U2",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_U2",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_U3",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_U3",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_M_b16.Name",0) <> "" THEN 
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b16",1,_UAG_PF_rot)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
 
	END;		!A++
	IF TagInfoEx(sTag +"_M_b17.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b17",1,_UAG_PF_orange) END;		!A+
	IF TagInfoEx(sTag +"_M_b18.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b18",1,_UAG_PF_orange) END;		!A-
	IF TagInfoEx(sTag +"_M_b19.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b19",1,_UAG_PF_rot) END;		!A--
	IF TagInfoEx(sTag +"_M_b11.Name",0) <> "" THEN
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b11",1,_UAG_PF_weiss)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));

	END;	!S++
	IF TagInfoEx(sTag +"_M_b14.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b14",1,_UAG_PF_weiss) END;	!S--
	
	hPane = _ObjectCallMethod(hPanes, "get_ItemByName", "Analog");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	sTemp = sTag + "_X"
	OBJECT hPen = _ObjectCallMethod(hPens, "get_ItemByName",sTemp );
	_ObjectSetProperty(hPen, "VerticalAxisAutoscale", -1);
	_ObjectCallMethod(hPen, "Select");
	ErrSet(0);
END

//	UAG_PA_DOS()
//	Übergabeparameter:	 Tag     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Anzeige von x,GW und Alarmen	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	05.10.15	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	22.05.17	Steiner		Autoscale

//	

FUNCTION UAG_PA_DOS(STRING sTag)
	STRING sTemp;
	OBJECT hAnalyst	= ObjectByName("UAG_PA1");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	ErrSet(1);
	UAG_PA_Anzeige_Stift(sTag +"_Q",1,_UAG_PF_schwarz,-1)

	UAG_PA_Anzeige_Stifte(sTag +"_QW",1,_UAG_PF_hellblau,0,0) 
	UAG_PA_Anzeige_Stifte(sTag +"_QHMAX",1,_UAG_PF_dunkelblau,0,0) 
	UAG_PA_Anzeige_Stifte(sTag +"_QHMIN",1,_UAG_PF_grau,0,0) 

	UAG_PA_Anzeige_Stifte_A(sTag +"_M_b17",1,5)															!BEMAX
	IF TagGetProperty(sTag +"_M_b19.Name","TagName") <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b19",1,_UAG_PF_grau) END;		!QMIN
	IF TagGetProperty(sTag +"_M_b23.Name","TagName") <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b23",1,_UAG_PF_dunkelblau) END;		!QMAX
//	IF TagInfoEx(sTag +"_M_b11.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b11",1,10) END;	!S++
//	IF TagInfoEx(sTag +"_M_b12.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b12",1,8) END;		!S+
//	IF TagInfoEx(sTag +"_M_b13.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b13",1,8) END;		!S-
//	IF TagInfoEx(sTag +"_M_b14.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b14",1,10) END;	!S--
	hPane = _ObjectCallMethod(hPanes, "get_ItemByName", "Analog");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	sTemp = sTag + "_Q"
	OBJECT hPen = _ObjectCallMethod(hPens, "get_ItemByName",sTemp );
	_ObjectSetProperty(hPen, "VerticalAxisAutoscale", -1);
	_ObjectCallMethod(hPen, "Select");
	ErrSet(0);
END


//	UAG_PA_INT()
//	Übergabeparameter:	 Tag     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Anzeige von x,GW und Alarmen	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	06.10.15	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	22.05.17	Steiner		Autoscale

//	

FUNCTION UAG_PA_INT(STRING sTag)
	STRING sTemp;
	OBJECT hAnalyst	= ObjectByName("UAG_PA1");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	ErrSet(1);
	UAG_PA_Anzeige_Stift(sTag +"_Q",1,_UAG_PF_schwarz,-1)

	UAG_PA_Anzeige_Stifte(sTag +"_QW",1,_UAG_PF_hellblau,0,0) 
//	UAG_PA_Anzeige_Stifte_ins(sTag +"_QHMAX",1,5) 
//	UAG_PA_Anzeige_Stifte_ins(sTag +"_QHMIN",1,6) 

	UAG_PA_Anzeige_Stifte_A(sTag +"_M_b17",1,5)															!BEMAX
	IF TagGetProperty(sTag +"_M_b19.Name","TagName") <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b19",1,_UAG_PF_grau) END;		!QMIN
	IF TagGetProperty(sTag +"_M_b23.Name","TagName") <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b23",1,_UAG_PF_dunkelblau) END;		!QMAX
//	IF TagInfoEx(sTag +"_M_b11.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b11",1,10) END;	!S++
//	IF TagInfoEx(sTag +"_M_b12.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b12",1,8) END;		!S+
//	IF TagInfoEx(sTag +"_M_b13.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b13",1,8) END;		!S-
//	IF TagInfoEx(sTag +"_M_b14.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b14",1,10) END;	!S--
	hPane = _ObjectCallMethod(hPanes, "get_ItemByName", "Analog");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	sTemp = sTag + "_Q"
	OBJECT hPen = _ObjectCallMethod(hPens, "get_ItemByName",sTemp );
	_ObjectSetProperty(hPen, "VerticalAxisAutoscale", -1);
	_ObjectCallMethod(hPen, "Select");
	ErrSet(0);
END

//	UAG_PA_REG()
//	Übergabeparameter:	 Tag     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Anzeige von x,GW und Alarmen	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	30.11.16	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	22.05.17	Steiner		Autoscale

//	

FUNCTION UAG_PA_REG(STRING sTag , STRING sTagReg)
	STRING sTemp;
	OBJECT hAnalyst	= ObjectByName("UAG_PA1");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	ErrSet(1);
	UAG_PA_Anzeige_Stift(sTag +"_X",1,_UAG_PF_schwarz,-1)
	UAG_PA_Anzeige_Stifte(sTagReg +"_W",1,_UAG_PF_hellblau,0,0)
	UAG_PA_Anzeige_Stifte(sTagReg +"_Y",1,_UAG_PF_gelb,0,0)
	IF TagInfoEx(sTag +"_AHH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AHH",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_AH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AH",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_AL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AL",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_ALL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_ALL",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_SHH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SHH",1,_UAG_PF_weiss) END;
	IF TagInfoEx(sTag +"_SH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SH",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SL",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SLL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SLL",1,_UAG_PF_weiss) END;

	IF TagInfoEx(sTag +"_M_b16.Name",0) <> "" THEN 
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b16",1,_UAG_PF_rot)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
 
	END;		!A++
	IF TagInfoEx(sTag +"_M_b17.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b17",1,_UAG_PF_orange) END;		!A+
	IF TagInfoEx(sTag +"_M_b18.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b18",1,_UAG_PF_orange) END;		!A-
	IF TagInfoEx(sTag +"_M_b19.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b19",1,_UAG_PF_rot) END;		!A--
	IF TagInfoEx(sTag +"_M_b11.Name",0) <> "" THEN
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b11",1,_UAG_PF_weiss)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));

	END;	!S++
	IF TagInfoEx(sTag +"_M_b12.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b12",1,_UAG_PF_gelb) END;		!S+
	IF TagInfoEx(sTag +"_M_b13.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b13",1,_UAG_PF_gelb) END;		!S-
	IF TagInfoEx(sTag +"_M_b14.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b14",1,_UAG_PF_weiss) END;	!S--
	hPane = _ObjectCallMethod(hPanes, "get_ItemByName", "Analog");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	sTemp = sTag + "_X"
	OBJECT hPen = _ObjectCallMethod(hPens, "get_ItemByName",sTemp );
	_ObjectSetProperty(hPen, "VerticalAxisAutoscale", -1);
	_ObjectCallMethod(hPen, "Select");
	ErrSet(0);
END

//	GUT_PA_STEP3()
//	Übergabeparameter:	 Tag     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Anzeige von x,GW und Alarmen für 3 Punkt Schrittregler	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	19.05.17	/	Schneider Electrik GmbH
//	Version				75.33.11.06
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	

FUNCTION GUT_PA_STEP3(STRING sTag , STRING sTagReg)
	STRING sTemp;
	OBJECT hAnalyst	= ObjectByName("UAG_PA1");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	ErrSet(1);
	UAG_PA_Anzeige_Stift(sTag +"_X",1,_UAG_PF_schwarz,-1)
	UAG_PA_Anzeige_Stifte(sTagReg +"_W",1,_UAG_PF_hellblau,0,0)
	UAG_PA_Anzeige_Stifte(sTagReg +"_AP",1,_UAG_PF_gelb,0,0)
	UAG_PA_Anzeige_Stifte(sTagReg +"_AN",1,_UAG_PF_orange,0,0)
//	UAG_PA_Anzeige_Stifte_ins(sTagReg +"_Y",1,_UAG_PF_gelb)
	IF TagInfoEx(sTag +"_AHH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AHH",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_AH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AH",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_AL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AL",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_ALL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_ALL",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_SHH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SHH",1,_UAG_PF_weiss) END;
	IF TagInfoEx(sTag +"_SH",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SH",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SL",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SLL",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SLL",1,_UAG_PF_weiss) END;

	IF TagInfoEx(sTag +"_M_b16.Name",0) <> "" THEN 
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b16",1,_UAG_PF_rot)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
 
	END;		!A++
	IF TagInfoEx(sTag +"_M_b17.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b17",1,_UAG_PF_orange) END;		!A+
	IF TagInfoEx(sTag +"_M_b18.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b18",1,_UAG_PF_orange) END;		!A-
	IF TagInfoEx(sTag +"_M_b19.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b19",1,_UAG_PF_rot) END;		!A--
	IF TagInfoEx(sTag +"_M_b11.Name",0) <> "" THEN
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b11",1,_UAG_PF_weiss)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));

	END;	!S++
	IF TagInfoEx(sTag +"_M_b12.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b12",1,_UAG_PF_gelb) END;		!S+
	IF TagInfoEx(sTag +"_M_b13.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b13",1,_UAG_PF_gelb) END;		!S-
	IF TagInfoEx(sTag +"_M_b14.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b14",1,_UAG_PF_weiss) END;	!S--
	hPane = _ObjectCallMethod(hPanes, "get_ItemByName", "Analog");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	sTemp = sTag + "_X"
	OBJECT hPen = _ObjectCallMethod(hPens, "get_ItemByName",sTemp );
	_ObjectSetProperty(hPen, "VerticalAxisAutoscale", -1);
	_ObjectCallMethod(hPen, "Select");
	ErrSet(0);
END

//	UAG_PA_ANA()
//	Übergabeparameter:	 Tag     
//                       
//	Rückgabewert:		 
//	Beschreibung:		Anzeige von x,GW und Alarmen	
//
//	Autor:				Wolfgang Steiner
//	Erstellungsdatum:	10.10.17	/	Schneider Electrik GmbH
//	Version				75.33.11.08
//
//	Historie:
//	geändert am	Autor		Kurzbeschreibung der Änderung		Referenz (optional)
//	

//	

FUNCTION UAG_PA_GWOH(STRING sTag)
	STRING sTemp;
	OBJECT hAnalyst	= ObjectByName("UAG_PA1");
	OBJECT hPanes = _ObjectGetProperty(hAnalyst, "Panes");
	OBJECT hPane = _ObjectCallMethod(hPanes , "Create", "Analog");
	_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
	ErrSet(1);
	UAG_PA_Anzeige_Stift(sTag +"_X",1,_UAG_PF_schwarz,-1)

	IF TagInfoEx(sTag +"_AHHE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AHHE",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_AHE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_AHE",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_ALE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_ALE",1,_UAG_PF_orange) END;
	IF TagInfoEx(sTag +"_ALLE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_ALLE",1,_UAG_PF_rot) END;
	IF TagInfoEx(sTag +"_SHHE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SHHE",1,_UAG_PF_weiss) END;
	IF TagInfoEx(sTag +"_SHE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SHE",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SLE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SLE",1,_UAG_PF_gelb) END;
	IF TagInfoEx(sTag +"_SLLE",0) <> "" THEN UAG_PA_Anzeige_Stifte(sTag +"_SLLE",1,_UAG_PF_weiss) END;

	IF TagInfoEx(sTag +"_M_b16.Name",0) <> "" THEN 
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b16",1,_UAG_PF_rot)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));
 
	END;		!A++
	IF TagInfoEx(sTag +"_M_b17.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b17",1,_UAG_PF_orange) END;		!A+
	IF TagInfoEx(sTag +"_M_b18.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b18",1,_UAG_PF_orange) END;		!A-
	IF TagInfoEx(sTag +"_M_b19.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b19",1,_UAG_PF_rot) END;		!A--
	IF TagInfoEx(sTag +"_M_b11.Name",0) <> "" THEN
		UAG_PA_Anzeige_Stifte_A(sTag +"_M_b11",1,_UAG_PF_weiss)
		hPane = _ObjectCallMethod(hPanes , "Create", "Alarm");
		_ObjectSetProperty(hPane , "BackgroundColor", PackedRGB(192, 192, 192));

	END;	!S++
	IF TagInfoEx(sTag +"_M_b12.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b12",1,_UAG_PF_gelb) END;		!S+
	IF TagInfoEx(sTag +"_M_b13.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b13",1,_UAG_PF_gelb) END;		!S-
	IF TagInfoEx(sTag +"_M_b14.Name",0) <> "" THEN UAG_PA_Anzeige_Stifte_A(sTag +"_M_b14",1,_UAG_PF_weiss) END;	!S--
	
	hPane = _ObjectCallMethod(hPanes, "get_ItemByName", "Analog");
	OBJECT hPens = _ObjectGetProperty(hPane, "Pens");
	sTemp = sTag + "_X"
	OBJECT hPen = _ObjectCallMethod(hPens, "get_ItemByName",sTemp );
	_ObjectSetProperty(hPen, "VerticalAxisAutoscale", -1);
	_ObjectCallMethod(hPen, "Select");
	ErrSet(0);
END


